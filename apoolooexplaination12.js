Skip to content
You said:
query States($statesId: ID!) {
  states(id: $statesId) {
    id
    name
  }
} explain this very clearly in hindi
ChatGPT said:
рдЬрд╝рд░реВрд░! рдиреАрдЪреЗ рджрд┐рдП рдЧрдП GraphQL query рдХреЛ рд╣рдо рдмрд╣реБрдд рд╣реА рдЖрд╕рд╛рди рдФрд░ рд╕реНрдкрд╖реНрдЯ рд╣рд┐рдВрджреА рдореЗрдВ рд╕рдордЭрддреЗ рд╣реИрдВ:

тЬи Query:
query States($statesId: ID!) {
  states(id: $statesId) {
    id
    name
  }
}
ЁЯФН рдЕрдм рдЗрд╕реЗ рднрд╛рдЧреЛрдВ рдореЗрдВ рд╕рдордЭрддреЗ рд╣реИрдВ:
1. query States($statesId: ID!)
рдпрд╣ рдПрдХ GraphQL Query рд╣реИ рдЬрд┐рд╕рдХрд╛ рдирд╛рдо рд╣реИ Statesред

рдЗрд╕рдореЗрдВ рдПрдХ variable (рдЪрд░) рдЗрд╕реНрддреЗрдорд╛рд▓ рд╣реЛ рд░рд╣рд╛ рд╣реИ рдЬрд┐рд╕рдХрд╛ рдирд╛рдо рд╣реИ $statesIdред

рдЗрд╕ variable рдХрд╛ type рд╣реИ ID!:

ID рдХрд╛ рдорддрд▓рдм рд╣реИ "рдкрд╣рдЪрд╛рди рд╕рдВрдЦреНрдпрд╛" рдпрд╛ рдХреЛрдИ unique рдкрд╣рдЪрд╛рдиред

! рдХрд╛ рдорддрд▓рдм рд╣реИ рдХрд┐ рдпрд╣ value рдЬрд╝рд░реВрд░реА рд╣реИ, рдпрд╛рдиреА рдЦрд╛рд▓реА (null) рдирд╣реАрдВ рд╣реЛ рд╕рдХрддреАред

ЁЯСЙ рдЗрд╕рдХрд╛ рдорддрд▓рдм рд╣реИ: рд╣рдо рдПрдХ рд░рд╛рдЬреНрдп (State) рдХреА рдкрд╣рдЪрд╛рди рд╕рдВрдЦреНрдпрд╛ рджреЗрдВрдЧреЗ, рдФрд░ рдЙрд╕рдХреЗ рдмрджрд▓реЗ рд╣рдореЗрдВ рдЙрд╕ рд░рд╛рдЬреНрдп рдХреА рдЬрд╛рдирдХрд╛рд░реА рдЪрд╛рд╣рд┐рдПред

2. { states(id: $statesId) { id name } }
рд╣рдо рдПрдХ states рдирд╛рдо рдХреА рдЪреАрдЬрд╝ рдХреЛ рдХреЙрд▓ рдХрд░ рд░рд╣реЗ рд╣реИрдВ рдФрд░ рдЙрд╕рдореЗрдВ id рднреЗрдЬ рд░рд╣реЗ рд╣реИрдВ, рдЬреЛ рдКрдкрд░ рджрд┐рдП рдЧрдП $statesId variable рдХреА value рд╣реИред

рд╣рдореЗрдВ рдЙрд╕ state рдХреА рдЬреЛ рдЬрд╛рдирдХрд╛рд░реА рдЪрд╛рд╣рд┐рдП, рд╡реЛ рд╣реИ:

id (рдЙрд╕ рд░рд╛рдЬреНрдп рдХреА рдкрд╣рдЪрд╛рди рд╕рдВрдЦреНрдпрд╛)

name (рдЙрд╕ рд░рд╛рдЬреНрдп рдХрд╛ рдирд╛рдо)

ЁЯз╛ рдкреВрд░рд╛ рдорддрд▓рдм:
рдпрд╣ query рдПрдХ рдЦрд╛рд╕ рд░рд╛рдЬреНрдп рдХреА рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╣реИред рд╣рдо рдЗрд╕реЗ рдЙрд╕ рд░рд╛рдЬреНрдп рдХрд╛ ID рджреЗрдХрд░ рдХреЙрд▓ рдХрд░рддреЗ рд╣реИрдВ, рдФрд░ рдЗрд╕рдХреЗ рдЬрд╡рд╛рдм рдореЗрдВ рд╣рдореЗрдВ рдЙрд╕ рд░рд╛рдЬреНрдп рдХрд╛ ID рдФрд░ рдирд╛рдо рдорд┐рд▓рддрд╛ рд╣реИред

ЁЯза рдЙрджрд╛рд╣рд░рдг:
рдорд╛рди рд▓реЛ рд╣рдо $statesId = "101" рдкрд╛рд╕ рдХрд░рддреЗ рд╣реИрдВ, рддреЛ query backend рд╕реЗ рдХреБрдЫ рдРрд╕рд╛ рдЬрд╡рд╛рдм рджреЗ рд╕рдХрддреА рд╣реИ:

{
  "data": {
    "states": {
      "id": "101",
      "name": "рд░рд╛рдЬрд╕реНрдерд╛рди"
    }
  }
}
рдЕрдЧрд░ рддреБрдореНрд╣реЗрдВ рдЗрд╕рд╕реЗ рдЬреБрдбрд╝рд╛ рдХреЛрдИ рдФрд░ рднрд╛рдЧ рд╕рдордЭрдирд╛ рд╣реЛ тАФ рдЬреИрд╕реЗ GraphQL, variables, рдпрд╛ backend рдХреЗ responses тАФ рддреЛ рдмрддрд╛рдирд╛, рдореИрдВ рдФрд░ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рд╕рдордЭрд╛ рджреВрдБрдЧрд╛ред

You said:
ha
ChatGPT said:
рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! ЁЯШК
рдЕрдм рдореИрдВ рдПрдХ рдмрд╛рд░ рдкреВрд░реЗ GraphQL query рдХреЛ рдПрдХ рдЖрд╕рд╛рди рд╣рд┐рдВрджреА рдЙрджрд╛рд╣рд░рдг рдХреЗ рд╕рд╛рде рджреЛрдмрд╛рд░рд╛ рд╕рдордЭрд╛рддрд╛ рд╣реВрдБ, рддрд╛рдХрд┐ рддреБрдореНрд╣реЗрдВ рдкреВрд░рд╛ рдкреНрд░реЛрд╕реЗрд╕ crystal clear рд╣реЛ рдЬрд╛рдПред

ЁЯФ╣ рдорд╛рди рд▓реЛ рддреБрдореНрд╣рд╛рд░рд╛ рдбреЗрдЯрд╛ рдЗрд╕ рддрд░рд╣ рд╣реИ:
рддреБрдореНрд╣рд╛рд░реЗ рдкрд╛рд╕ рдХрдИ рд░рд╛рдЬреНрдпреЛрдВ рдХреА рдЬрд╛рдирдХрд╛рд░реА рд╣реИ, рдЬреИрд╕реЗ:

ID	Name
101	рд░рд╛рдЬрд╕реНрдерд╛рди
102	рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░
103	рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢
рдЕрдм рддреБрдо GraphQL рд╕реЗ рдкреВрдЫрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реЛ:

"рдореБрдЭреЗ рд░рд╛рдЬреНрдп рдХрд╛ рдирд╛рдо рдмрддрд╛рдУ, рдЬрд┐рд╕рдХрд╛ ID = 102 рд╣реИред"

ЁЯФ╣ GraphQL Query:
query States($statesId: ID!) {
  states(id: $statesId) {
    id
    name
  }
}
рдпрд╣рд╛рдБ:

States тЖТ query рдХрд╛ рдирд╛рдо рд╣реИред

$statesId тЖТ рдПрдХ variable рд╣реИ рдЬрд┐рд╕реЗ рддреБрдо рдмрд╛рдж рдореЗрдВ value рджреЛрдЧреЗ, рдЬреИрд╕реЗ "102"ред

ЁЯФ╣ Variable рдкрд╛рд╕ рдХрд░рдирд╛:
рдЬрдм рддреБрдо query рднреЗрдЬреЛрдЧреЗ, рддрдм рддреБрдо variable рдХреА value рднреА рднреЗрдЬрддреЗ рд╣реЛ, рдЬреИрд╕реЗ:

{
  "statesId": "102"
}
ЁЯФ╣ Backend (Server) рдЗрд╕рдХрд╛ рдХреНрдпрд╛ рдХрд░реЗрдЧрд╛?
Backend рджреЗрдЦреЗрдЧрд╛ рдХрд┐ id = 102 рдХрд┐рд╕ рд░рд╛рдЬреНрдп рдХрд╛ рд╣реИ тАФ рдФрд░ рдЙрд╕ рд░рд╛рдЬреНрдп рдХрд╛ id рдФрд░ name return рдХрд░ рджреЗрдЧрд╛ред

ЁЯФ╣ Response:
{
  "data": {
    "states": {
      "id": "102",
      "name": "рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░"
    }
  }
}
ЁЯФЪ рдЖрд╕рд╛рди рднрд╛рд╖рд╛ рдореЗрдВ рд╕рд╛рд░рд╛рдВрд╢:
рдпрд╣ query рдХрд┐рд╕реА рд░рд╛рдЬреНрдп рдХреА ID рджреЗрдХрд░ рдЙрд╕рдХрд╛ рдирд╛рдо рдФрд░ ID рдкрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рд╣реИред

рдЕрдЧрд░ рддреБрдо рдЪрд╛рд╣реЛ рддреЛ рдореИрдВ GraphQL рдХрд╛ рдкреВрд░рд╛ beginner рд╕реЗ рд▓реЗрдХрд░ advanced рддрдХ рдХрд╛ рдЧрд╛рдЗрдб рднреА рд╣рд┐рдВрджреА рдореЗрдВ рджреЗ рд╕рдХрддрд╛ рд╣реВрдБ тАФ рдмрддрд╛рдУ рдЕрдЧрд░ рджрд┐рд▓рдЪрд╕реНрдкреА рд╣реЛ ЁЯЩВ

You said:
ha
ChatGPT said:
рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! ЁЯШД
рдЕрдм рдореИрдВ рддреБрдореНрд╣реЗрдВ GraphQL рдХреЛ рдкреВрд░реА рддрд░рд╣ рд╣рд┐рдВрджреА рдореЗрдВ, beginner рд╕реЗ advanced рд▓реЗрд╡рд▓ рддрдХ рд╕рдордЭрд╛рддрд╛ рд╣реВрдБ тАФ рдЖрд╕рд╛рди рднрд╛рд╖рд╛ рдореЗрдВ, step by step.

ЁЯФ░ рднрд╛рдЧ 1: GraphQL рдХреНрдпрд╛ рд╣реИ?
ЁЯУМ рдкрд░рд┐рднрд╛рд╖рд╛:
GraphQL рдПрдХ query language рд╣реИ рдЬрд┐рд╕рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рд╣рдо API рд╕реЗ data рдордВрдЧрд╡рд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд░рддреЗ рд╣реИрдВред

тЪЩя╕П REST API рдмрдирд╛рдо GraphQL:
REST API	GraphQL
рдЕрд▓рдЧ-рдЕрд▓рдЧ URL рдкрд░ data	рдПрдХ рд╣реА URL рд╕реЗ рд╕рдм data
рдЬрд╝реНрдпрд╛рджрд╛/рдХрдо data рдорд┐рд▓ рд╕рдХрддрд╛ рд╣реИ	рдЬрд┐рддрдирд╛ рдорд╛рдБрдЧреЛрдЧреЗ, рдЙрддрдирд╛ рд╣реА рдорд┐рд▓реЗрдЧрд╛
рдХрдИ рдмрд╛рд░ server hit рдХрд░рдирд╛ рдкрдбрд╝рддрд╛ рд╣реИ	рдПрдХ рд╣реА рдмрд╛рд░ рдореЗрдВ рдЬрд╝рд░реВрд░рдд рдХрд╛ рд╕рдм рдорд┐рд▓ рд╕рдХрддрд╛ рд╣реИ
ЁЯФ░ рднрд╛рдЧ 2: GraphQL рдХреЗ рдореВрд▓ рднрд╛рдЧ (Basics)
1. Query:
Server рд╕реЗ data рдордВрдЧрд╛рдиреЗ рдХреЗ рд▓рд┐рдПред

{
  states {
    id
    name
  }
}
ЁЯСЙ рдпрд╣ query рд╕рднреА рд░рд╛рдЬреНрдпреЛрдВ рдХрд╛ ID рдФрд░ рдирд╛рдо рд▓рд╛рдПрдЧреАред

2. Variables:
рдЬрдм рд╣рдореЗрдВ рдХрд┐рд╕реА рдЦрд╛рд╕ рдЪреАрдЬрд╝ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдЪрд╛рд╣рд┐рдП, рддреЛ рд╣рдо variables use рдХрд░рддреЗ рд╣реИрдВред

query GetState($stateId: ID!) {
  states(id: $stateId) {
    id
    name
  }
}
Variable value рдРрд╕реЗ рднреЗрдЬрддреЗ рд╣реИрдВ:

{
  "stateId": "101"
}
3. Mutations:
рдЬрдм рд╣рдореЗрдВ data create, update, рдпрд╛ delete рдХрд░рдирд╛ рд╣реЛрддрд╛ рд╣реИред

mutation AddState($name: String!) {
  addState(name: $name) {
    id
    name
  }
}
Variable:

{
  "name": "рдкрдВрдЬрд╛рдм"
}
4. Fragments:
рдмрд╛рд░-рдмрд╛рд░ рдПрдХ рдЬреИрд╕рд╛ data structure рд▓рд┐рдЦрдиреЗ рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдПред

fragment StateDetails on State {
  id
  name
}

query {
  states {
    ...StateDetails
  }
}
5. Aliasing & Renaming:
рдЬрдм рдПрдХ рд╣реА field рдХреЛ рджреЛ рдмрд╛рд░ рдЕрд▓рдЧ-рдЕрд▓рдЧ рдирд╛рдо рд╕реЗ рд▓рд╛рдирд╛ рд╣реЛред

{
  state1: states(id: "101") {
    name
  }
  state2: states(id: "102") {
    name
  }
}
ЁЯФ░ рднрд╛рдЧ 3: Advanced Concepts (рд╕рдВрдХреНрд╖реЗрдк рдореЗрдВ)
рдлреАрдЪрд░	рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?
Directives @include, @skip	рдХрд┐рд╕реА field рдХреЛ рд╢рд░реНрддреЛрдВ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рд▓рд╛рдирд╛
Pagination	data рдХреЛ pages рдореЗрдВ рд▓рд╛рдирд╛ (like limit/offset)
Subscriptions	Real-time data updates
Resolvers	Server рдкрд░ logic рдЬреЛ рдмрддрд╛рддрд╛ рд╣реИ рдХрд┐ query рдХреЗ рдЬрд╡рд╛рдм рдореЗрдВ data рдХрд╣рд╛рдБ рд╕реЗ рдЖрдП
ЁЯЫая╕П Bonus: Tools рдЬреЛ GraphQL рд╕реАрдЦрдиреЗ рдореЗрдВ рдорджрдж рдХрд░реЗрдВрдЧреЗ
Tool	рдХрд╛рдо
GraphiQL / GraphQL Playground	Query рд▓рд┐рдЦрдиреЗ рдФрд░ test рдХрд░рдиреЗ рдХрд╛ environment
Apollo Client / Server	Frontend рдФрд░ backend рджреЛрдиреЛрдВ рдХреЗ рд▓рд┐рдП GraphQL library
Hasura	Auto-GraphQL API for your database
Postman	рдЕрдм GraphQL рд╕рдкреЛрд░реНрдЯ рдХрд░рддрд╛ рд╣реИ
ЁЯФЪ рдирд┐рд╖реНрдХрд░реНрд╖:
GraphQL flexible, efficient рдФрд░ developer-friendly рддрд░реАрдХрд╛ рд╣реИ APIs рд╕реЗ рдмрд╛рддрдЪреАрдд рдХрд░рдиреЗ рдХрд╛ред
рддреБрдо рдЪрд╛рд╣реЗ backend рдмрдирд╛рдУ рдпрд╛ frontend тАФ GraphQL рд╣рд░ рдЬрдЧрд╣ powerful рд╕рд╛рдмрд┐рдд рд╣реЛрддрд╛ рд╣реИред

рдЕрдЧрд░ рддреБрдо рдЪрд╛рд╣реЛ рддреЛ рдореИрдВ:

рдПрдХ рдЫреЛрдЯрд╛ GraphQL рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдмрдирд╛ рдХрд░ рджрд┐рдЦрд╛ рд╕рдХрддрд╛ рд╣реВрдБ

рдпрд╛ рд╕рд┐рд░реНрдл backend рдпрд╛ frontend рдкрд░ focus рдХрд░рдХреЗ рд╕рд┐рдЦрд╛ рд╕рдХрддрд╛ рд╣реВрдБ

рдмрддрд╛рдУ рдХрд┐рд╕рдореЗрдВ рджрд┐рд▓рдЪрд╕реНрдкреА рд╣реИ? ЁЯОп

рд╕рд┐рд░реНрдл backend (GraphQL server рдмрдирд╛рдирд╛)

рд╕рд┐рд░реНрдл frontend (React рд╕реЗ GraphQL call рдХрд░рдирд╛)

рджреЛрдиреЛрдВ рдорд┐рд▓рд╛рдХрд░ рдПрдХ рдЫреЛрдЯрд╛ рдкреНрд░реЛрдЬреЗрдХреНрдЯ

рдпрд╛ рд╕рд┐рд░реНрдл рдЕрднреНрдпрд╛рд╕ (practice) questions?

рддреБрдореНрд╣рд╛рд░реЗ рдЬрд╡рд╛рдм рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдореИрдВ рдЕрдЧрд▓рд╛ step рддреИрдпрд╛рд░ рдХрд░реВрдБрдЧрд╛ред ЁЯТб

You said:
dono frontend and backend project explanation ke sath
ChatGPT said:
рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! ЁЯТе
рддреБрдордиреЗ рдХрд╣рд╛ рдХрд┐ рддреБрдо GraphQL рдХрд╛ рдкреВрд░рд╛ рдкреНрд░реЛрдЬреЗрдХреНрдЯ рд╕реАрдЦрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реЛ тАФ рдЬрд┐рд╕рдореЗрдВ both frontend рдФрд░ backend рд╣реЛ, рдФрд░ рд╕рд╛рде рдореЗрдВ explanation рднреА рдЪрд╛рд╣рд┐рдПред

рддреЛ рдЪрд▓реЛ, рд╣рдо рдПрдХ рдЫреЛрдЯрд╛ рд▓реЗрдХрд┐рди рдкреВрд░рд╛ рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдмрдирд╛рдПрдБрдЧреЗ тАФ рдЬрд┐рд╕реЗ рддреБрдо рдЖрд╕рд╛рдиреА рд╕реЗ рд╕рдордЭ рд╕рдХреЛ рдФрд░ рдЦреБрдж рднреА рдмрдирд╛ рд╕рдХреЛред

ЁЯОп рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдХрд╛ рдирд╛рдо: State Info Manager
ЁЯФз рдХрд╛рдо рдХреНрдпрд╛ рдХрд░реЗрдЧрд╛?
User рдПрдХ рд░рд╛рдЬреНрдп (State) рдХрд╛ рдирд╛рдо рдбрд╛рд▓ рд╕рдХрддрд╛ рд╣реИред

User рд╕рднреА рд░рд╛рдЬреНрдпреЛрдВ рдХреА рд▓рд┐рд╕реНрдЯ рджреЗрдЦ рд╕рдХрддрд╛ рд╣реИред

Backend рдореЗрдВ рдбреЗрдЯрд╛ MongoDB рдореЗрдВ рд╕реЗрд╡ рд╣реЛрдЧрд╛ред

GraphQL рд╕реЗ рджреЛрдиреЛрдВ рддрд░рдлрд╝ (client тЗД server) рдмрд╛рдд рд╣реЛрдЧреАред

ЁЯз▒ Stack (рддрдХрдиреАрдХреА рдврд╛рдВрдЪрд╛)
Layer	Technology
Frontend	React + Apollo Client
Backend	Node.js + Express + Apollo Server
Database	MongoDB (mongoose)
ЁЯФБ Workflow Overview
React App <--> Apollo Client <--> GraphQL Server <--> MongoDB
ЁЯФи Step-by-Step Implementation
тЬи Part 1: Backend тАУ GraphQL Server (Node.js + Apollo Server)
1. ЁЯУБ Project Structure:
backend/
тФВ
тФЬтФАтФА index.js
тФЬтФАтФА schema.js
тФЬтФАтФА resolvers.js
тФЬтФАтФА models/
тФВ   тФФтФАтФА State.js
тФЬтФАтФА .env
2. ЁЯУж Required Packages:
npm init -y
npm install express apollo-server-express graphql mongoose dotenv
3. ЁЯзм models/State.js
const mongoose = require("mongoose");

const stateSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
});

module.exports = mongoose.model("State", stateSchema);
4. ЁЯУЬ schema.js
const { gql } = require("apollo-server-express");

const typeDefs = gql`
  type State {
    id: ID!
    name: String!
  }

  type Query {
    states: [State]
    state(id: ID!): State
  }

  type Mutation {
    addState(name: String!): State
  }
`;

module.exports = typeDefs;
5. ЁЯФН resolvers.js
const State = require("./models/State");

const resolvers = {
  Query: {
    states: async () => await State.find(),
    state: async (_, { id }) => await State.findById(id),
  },
  Mutation: {
    addState: async (_, { name }) => {
      const newState = new State({ name });
      return await newState.save();
    },
  },
};

module.exports = resolvers;
6. ЁЯЪА index.js
require("dotenv").config();
const express = require("express");
const { ApolloServer } = require("apollo-server-express");
const mongoose = require("mongoose");
const typeDefs = require("./schema");
const resolvers = require("./resolvers");

async function startServer() {
  const app = express();

  const server = new ApolloServer({ typeDefs, resolvers });
  await server.start();
  server.applyMiddleware({ app });

  mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  });

  app.listen(4000, () =>
    console.log("ЁЯЪА Server ready at http://localhost:4000/graphql")
  );
}

startServer();
7. ЁЯФР .env
MONGO_URI=mongodb://localhost:27017/statesdb
тЬЕ рдЕрдм рддреБрдореНрд╣рд╛рд░рд╛ GraphQL backend рддреИрдпрд╛рд░ рд╣реИред

ЁЯТ╗ Part 2: Frontend тАУ React + Apollo Client
1. тЪЩя╕П Create React App
npx create-react-app frontend
cd frontend
npm install @apollo/client graphql
2. ЁЯУБ Structure:
frontend/
тФВ
тФЬтФАтФА App.js
тФЬтФАтФА StateList.js
тФЬтФАтФА AddState.js
тФФтФАтФА apolloClient.js
3. ЁЯФМ apolloClient.js
import { ApolloClient, InMemoryCache } from "@apollo/client";

const client = new ApolloClient({
  uri: "http://localhost:4000/graphql",
  cache: new InMemoryCache(),
});

export default client;
4. ЁЯУЛ App.js
import React from "react";
import { ApolloProvider } from "@apollo/client";
import client from "./apolloClient";
import StateList from "./StateList";
import AddState from "./AddState";

function App() {
  return (
    <ApolloProvider client={client}>
      <div style={{ padding: "2rem" }}>
        <h1>рд░рд╛рдЬреНрдп рд╕реВрдЪреА рдкреНрд░рдмрдВрдзрдХ</h1>
        <AddState />
        <StateList />
      </div>
    </ApolloProvider>
  );
}

export default App;
5. ЁЯУе AddState.js
import React, { useState } from "react";
import { useMutation, gql } from "@apollo/client";

const ADD_STATE = gql`
  mutation AddState($name: String!) {
    addState(name: $name) {
      id
      name
    }
  }
`;

const AddState = () => {
  const [name, setName] = useState("");
  const [addState] = useMutation(ADD_STATE, {
    refetchQueries: ["GetStates"],
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (name.trim()) {
      await addState({ variables: { name } });
      setName("");
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        placeholder="рд░рд╛рдЬреНрдп рдХрд╛ рдирд╛рдо"
        value={name}
        onChange={(e) => setName(e.target.value)}
      />
      <button type="submit">рдЬреЛрдбрд╝реЗрдВ</button>
    </form>
  );
};

export default AddState;
6. ЁЯУГ StateList.js
import React from "react";
import { useQuery, gql } from "@apollo/client";

const GET_STATES = gql`
  query GetStates {
    states {
      id
      name
    }
  }
`;

const StateList = () => {
  const { data, loading, error } = useQuery(GET_STATES);

  if (loading) return <p>рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...</p>;
  if (error) return <p>рдХреБрдЫ рдЧрд▓рдд рд╣реЛ рдЧрдпрд╛ ЁЯШв</p>;

  return (
    <ul>
      {data.states.map((state) => (
        <li key={state.id}>{state.name}</li>
      ))}
    </ul>
  );
};

export default StateList;
тЬЕ рдЕрдм рддреБрдореНрд╣рд╛рд░рд╛ рдкреВрд░рд╛ GraphQL рдкреНрд░реЛрдЬреЗрдХреНрдЯ рддреИрдпрд╛рд░ рд╣реИ!
ЁЯЪА рдЪрд▓рд╛рдиреЗ рдХреЗ рд▓рд┐рдП:
backend рдХреЛ рдЪрд▓рд╛рдУ:

node index.js
frontend рдХреЛ рдЪрд▓рд╛рдУ:

npm start
ЁЯУЪ рдЕрдм рддреБрдордиреЗ рдХреНрдпрд╛ рд╕реАрдЦрд╛?
GraphQL server рдХреИрд╕реЗ рдмрдирд╛рддреЗ рд╣реИрдВ (query + mutation + MongoDB)

React рд╕реЗ Apollo Client рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рдХреЗ data fetch/add рдХрд░рдирд╛

Frontend & backend рдХреЛ connect рдХрд░рдирд╛

ЁЯФЬ рдЕрдЧрд▓рд╛ рдХрджрдо?
рдЕрдЧрд░ рдЪрд╛рд╣реЛ рддреЛ рдореИрдВ:

рдЗрд╕реЗ Docker рдореЗрдВ wrap рдХрд░рдирд╛ рд╕рд┐рдЦрд╛ рд╕рдХрддрд╛ рд╣реВрдБ

рдпрд╛ Auth (JWT) рдЬреЛрдбрд╝рдирд╛ рд╕рд┐рдЦрд╛ рд╕рдХрддрд╛ рд╣реВрдБ

рдпрд╛ Pagination, Filtering рдЬреИрд╕реЗ Advanced features рдмрддрд╛рдКрдБ

рдмрддрд╛рдУ, рдЖрдЧреЗ рдХреНрдпрд╛ explore рдХрд░рдирд╛ рд╣реИ?



Attach

Search

Voice
No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.

