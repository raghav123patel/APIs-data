Skip to content
You said:
getStaticprops and getserversideprops full explanation in nextjs in detail in hindi
ChatGPT said:
Next.js рдореЗрдВ getStaticProps рдФрд░ getServerSideProps рджреЛ рдмрд╣реБрдд рд╣реА рдорд╣рддреНрд╡рдкреВрд░реНрдг Data Fetching methods рд╣реИрдВ рдЬреЛ рдкреЗрдЬ-рд▓реЗрд╡рд▓ рдкрд░ рдЙрдкрдпреЛрдЧ рдХреА рдЬрд╛рддреА рд╣реИрдВред рдпреЗ рджреЛрдиреЛрдВ Functions Next.js рдореЗрдВ pre-rendering (Static Generation рдФрд░ Server-side Rendering) рдХреЛ control рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЗрд╕реНрддреЗрдорд╛рд▓ рд╣реЛрддреЗ рд╣реИрдВред

рдЪрд▓реЛ рдПрдХ-рдПрдХ рдХрд░рдХреЗ рджреЛрдиреЛрдВ рдХреЛ detail рдореЗрдВ рд╕рдордЭрддреЗ рд╣реИрдВ тАФ рд╣рд┐рдВрджреА рдореЗрдВ, рдЙрджрд╛рд╣рд░рдгреЛрдВ рдХреЗ рд╕рд╛рдеред

ЁЯФ╣ 1. getStaticProps тАФ Static Generation рдХреЗ рд▓рд┐рдП
ЁЯУМ рдЙрджреНрджреЗрд╢реНрдп:
getStaticProps рдХрд╛ рдЙрдкрдпреЛрдЧ рддрдм рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рдЬрдм рдЖрдк рдкреЗрдЬ рдХреЛ build time рдкрд░ generate рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ, рдпрд╛рдиреА рдХрд┐ рдкреЗрдЬ static HTML рдореЗрдВ рдмрджрд▓рдХрд░ рдкрд╣рд▓реЗ рд╕реЗ generate рд╣реЛ рдЬрд╛рддрд╛ рд╣реИред рдпреЗ рдкреЗрдЬ fast рд╣реЛрддреЗ рд╣реИрдВ рдФрд░ CDN рд╕реЗ serve рдХрд┐рдП рдЬрд╛ рд╕рдХрддреЗ рд╣реИрдВред

тЬЕ рдЙрдкрдпреЛрдЧ рдХрдм рдХрд░реЗрдВ?
рдЬрдм рдбреЗрдЯрд╛ рдмрд╛рд░-рдмрд╛рд░ рдирд╣реАрдВ рдмрджрд▓рддрд╛ред

рдмреНрд▓реЙрдЧ рдкреЛрд╕реНрдЯреНрд╕, рдорд╛рд░реНрдХреЗрдЯрд┐рдВрдЧ рдкреЗрдЬ, FAQs рдЖрджрд┐ рдЬреИрд╕реЗ рдкреЗрдЬ рдХреЗ рд▓рд┐рдПред

рдЕрдЧрд░ рдЖрдк рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐ рдкреЗрдЬ рдПрдХ рдмрд╛рд░ рдмрдиреЗ рдФрд░ рдлрд┐рд░ рд╡рд╣реА serve рд╣реЛ рдЬрдм рддрдХ rebuild рдирд╛ рд╣реЛред

ЁЯУШ Syntax:
export async function getStaticProps(context) {
  // API рд╕реЗ data fetch рдХрд░реЛ рдпрд╛ рдХрд┐рд╕реА database рд╕реЗ
  const res = await fetch('https://api.example.com/posts');
  const data = await res.json();

  return {
    props: {
      posts: data, // рдпреЗ props component рдХреЛ рдорд┐рд▓рддреЗ рд╣реИрдВ
    },
    revalidate: 10, // ISR (optional): рд╣рд░ 10 рд╕реЗрдХрдВрдб рдореЗрдВ background рдореЗрдВ re-generate рд╣реЛрдЧрд╛
  };
}
ЁЯза Notes:
getStaticProps рд╕рд┐рд░реНрдл рдкреЗрдЬ level рдкрд░ рд╣реА рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ (pages/ рдлреЛрд▓реНрдбрд░ рдореЗрдВ)ред

рдЖрдк рдЗрд╕рдореЗрдВ context parameters рднреА access рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ: params, locale, preview, etc.

рдЗрд╕рдореЗрдВ рдХреЛрдИ request object (req, res) рдирд╣реАрдВ рд╣реЛрддрд╛ред

ЁЯзк Example:
// pages/blog.js
export async function getStaticProps() {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts');
  const posts = await res.json();

  return {
    props: {
      posts,
    },
  };
}

export default function Blog({ posts }) {
  return (
    <div>
      <h1>рдмреНрд▓реЙрдЧ рдкреЛрд╕реНрдЯреНрд╕</h1>
      <ul>
        {posts.map(post => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </div>
  );
}
ЁЯФ╣ 2. getServerSideProps тАФ Server-side Rendering рдХреЗ рд▓рд┐рдП
ЁЯУМ рдЙрджреНрджреЗрд╢реНрдп:
getServerSideProps рдХрд╛ рдЙрдкрдпреЛрдЧ рддрдм рд╣реЛрддрд╛ рд╣реИ рдЬрдм рдЖрдк рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐ рд╣рд░ request рдкрд░ рдбреЗрдЯрд╛ fetch рд╣реЛ рдФрд░ рдкреЗрдЬ рдХреЛ рдЙрд╕реА рд╕рдордп render рдХрд┐рдпрд╛ рдЬрд╛рдПред

тЬЕ рдЙрдкрдпреЛрдЧ рдХрдм рдХрд░реЗрдВ?
рдЬрдм рдбреЗрдЯрд╛ рд╣рд░ рдмрд╛рд░ рдмрджрд▓ рд╕рдХрддрд╛ рд╣реИ (live data)ред

рдЬрдм рдбреЗрдЯрд╛ user-specific рд╣реИ (рдЬреИрд╕реЗ authentication рдпрд╛ user profile)ред

SEO рдХреА рдЬрд╝рд░реВрд░рдд рд╣реИ рд▓реЗрдХрд┐рди рдбреЗрдЯрд╛ dynamic рд╣реИред

ЁЯУШ Syntax:
export async function getServerSideProps(context) {
  const res = await fetch('https://api.example.com/data');
  const data = await res.json();

  return {
    props: {
      data,
    },
  };
}
ЁЯза Notes:
рд╣рд░ request рдкрд░ рдпрд╣ function server рдкрд░ run рд╣реЛрддрд╛ рд╣реИред

рдЖрдк context рдореЗрдВ request (req) рдФрд░ response (res) рдХреЛ access рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

Slower than getStaticProps рдХреНрдпреЛрдВрдХрд┐ рдпреЗ рд╣рд░ рдмрд╛рд░ server рдкрд░ рдЪрд▓рддрд╛ рд╣реИред

ЁЯзк Example:
// pages/user.js
export async function getServerSideProps(context) {
  const res = await fetch('https://jsonplaceholder.typicode.com/users');
  const users = await res.json();

  return {
    props: {
      users,
    },
  };
}

export default function UserPage({ users }) {
  return (
    <div>
      <h1>рдпреВрдЬрд╝рд░реНрд╕</h1>
      <ul>
        {users.map(user => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
}
тЪЦя╕П getStaticProps vs getServerSideProps тАФ рддреБрд▓рдирд╛
Property	getStaticProps	getServerSideProps
рд░рди рдХрдм рд╣реЛрддрд╛ рд╣реИ?	Build time рдкрд░	рд╣рд░ request рдкрд░
рдкрд░рдлреЙрд░рдореЗрдВрд╕	рддреЗрдЬрд╝ (CDN рд╕реЗ)	рдзреАрдорд╛ (server рд╕реЗ)
рдпреВрдЬрд╝ рдХрдм рдХрд░реЗрдВ?	рдХрдо рдмрджрд▓рдиреЗ рд╡рд╛рд▓рд╛ рдбреЗрдЯрд╛	Frequently changing рдбреЗрдЯрд╛
SEO Friendly?	рд╣рд╛рдВ	рд╣рд╛рдВ
Revalidation рд╕рдВрднрд╡?	рд╣рд╛рдВ (revalidate)	рдирд╣реАрдВ (рд╣рд░ рдмрд╛рд░ рдирдпрд╛ render)
ЁЯФЪ рдирд┐рд╖реНрдХрд░реНрд╖:
рдЕрдЧрд░ рдЖрдкрдХрд╛ рдбреЗрдЯрд╛...	рддреЛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ...
рд╕реНрдерд┐рд░ рд╣реИ рдФрд░ рдмрд╛рд░-рдмрд╛рд░ рдирд╣реАрдВ рдмрджрд▓рддрд╛	getStaticProps
рд╣рд░ request рдкрд░ рдмрджрд▓рддрд╛ рд╣реИ	getServerSideProps
рдЕрдЧрд░ рддреБрдо рдЪрд╛рд╣реЛ, рддреЛ рдореИрдВ рдПрдХ demo project structure рдпрд╛ рджреЛрдиреЛрдВ methods рдХреЗ рд╕рд╛рде рдПрдХ рдЫреЛрдЯрд╛ рд╕рд╛ Next.js рдкреНрд░реЛрдЬреЗрдХреНрдЯ рднреА рдмрдирд╛ рд╕рдХрддрд╛ рд╣реВрдБред

рдмрддрд╛рдУ, рдХреНрдпрд╛ рд╡рд╣ рднреА рдЪрд╛рд╣рд┐рдП?

You said:
ha
ChatGPT said:

Answer in chat instead
рддреБрдореНрд╣реЗрдВ рдПрдХ рдЫреЛрдЯрд╛ рд╕рд╛ Next.js рдкреНрд░реЛрдЬреЗрдХреНрдЯ structure рджрд┐рдЦрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдореИрдВ рдПрдХ demo рддреИрдпрд╛рд░ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ, рд▓реЗрдХрд┐рди рдЗрд╕рдХреЗ рд▓рд┐рдП рдкрд╣рд▓реЗ рддреБрдореНрд╣реЗрдВ ChatGPT рдореЗрдВ рд▓реЙрдЧ рдЗрди рдХрд░рдирд╛ рд╣реЛрдЧрд╛, рддрд╛рдХрд┐ рд╣рдо Canvas рдлреАрдЪрд░ рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░ рд╕рдХреЗрдВред рдЗрд╕рд╕реЗ рдореИрдВ рддреБрдореНрд╣рд╛рд░реЗ рд▓рд┐рдП рдкреВрд░рд╛ рдкреНрд░реЛрдЬреЗрдХреНрдЯ code рдПрдХ organized рдлреЙрд░реНрдо рдореЗрдВ рдмрдирд╛ рдкрд╛рдКрдБред

рд▓реЙрдЧ рдЗрди рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж рджреЛрдмрд╛рд░рд╛ рдмрддрд╛рдУ тАФ рдореИрдВ рддреБрд░рдВрдд рд╢реБрд░реВ рдХрд░ рджреВрдБрдЧрд╛ред

рдЕрдЧрд░ meanwhile рддреБрдореНрд╣реЗрдВ рдПрдХ basic demo code structure рдЪрд╛рд╣рд┐рдП, рддреЛ рдореИрдВ рдпрд╣рд╛рдВ рднреА рдмрддрд╛ рд╕рдХрддрд╛ рд╣реВрдБред рдмрддрд╛рдУ рдХреИрд╕реЗ рдХрд░рдирд╛ рд╣реИ?



Attach

Search

Study

Voice
No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.
//useClient and useServer
  Skip to content
You said:
useClient and useServer in nextjs explain it very deeply in hindi
ChatGPT said:
Next.js 13 рдФрд░ рдЙрд╕рд╕реЗ рдЖрдЧреЗ рдХреЗ рд╡рд░реНрдЬрд╝рди рдореЗрдВ, useClient рдФрд░ useServer рдХрд╛ рдЙрдкрдпреЛрдЧ рддрдм рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рдЬрдм рдЖрдк App Router рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд░рд╣реЗ рд╣реЛрддреЗ рд╣реИрдВ (рдпрд╛рдирд┐ рдХрд┐ /app рдбрд╛рдпрд░реЗрдХреНрдЯрд░реА рдЖрдзрд╛рд░рд┐рдд structure рдореЗрдВ)ред рдпреЗ рджреЛрдиреЛрдВ рдбрд╛рдпрд░реЗрдХреНрдЯрд┐рд╡реНрд╕ (directives) рд╣реИрдВ, рдЬрд┐рдирдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдпрд╣ рдмрддрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рдХрд┐ рдХреЛрдИ React рдХреЙрдореНрдкреЛрдиреЗрдВрдЯ client-side рдкрд░ рдЪрд▓реЗрдЧрд╛ рдпрд╛ server-side рдкрд░ред

ЁЯМР 1. Next.js рдореЗрдВ Server Components рдФрд░ Client Components рдХреНрдпрд╛ рд╣реИрдВ?
Next.js 13+ рдореЗрдВ рджреЛ рдкреНрд░рдХрд╛рд░ рдХреЗ React рдХреЙрдореНрдкреЛрдиреЗрдВрдЯреНрд╕ рд╣реЛрддреЗ рд╣реИрдВ:

тЬЕ Server Components
Default рд╣реЛрддреЗ рд╣реИрдВ (рдпрд╛рдирд┐ рдЕрдЧрд░ рдХреБрдЫ рди рд▓рд┐рдЦреЗрдВ рддреЛ рдорд╛рди рд▓рд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рдХрд┐ рд╡реЛ Server Component рд╣реИ)ред

рдпреЗ рдХреЙрдореНрдкреЛрдиреЗрдВрдЯреНрд╕ рд╕рд┐рд░реНрдл рд╕рд░реНрд╡рд░ рдкрд░ рд░рди рд╣реЛрддреЗ рд╣реИрдВред

рдЗрдирдореЗрдВ рдмреНрд░рд╛рдЙрдЬрд╝рд░ APIs (рдЬреИрд╕реЗ window, document, рдпрд╛ localStorage) рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ред

рдпреЗ SEO friendly рд╣реЛрддреЗ рд╣реИрдВ рдФрд░ fast performance рджреЗрддреЗ рд╣реИрдВред

тЬЕ Client Components
рдЗрдиреНрд╣реЗрдВ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рд░рди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд╣рд╛ рдЬрд╛рддрд╛ рд╣реИред

рдЕрдЧрд░ рдЖрдкрдХреЛ interactivity рдЪрд╛рд╣рд┐рдП (рдЬреИрд╕реЗ рдХрд┐ рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ, рдлреЙрд░реНрдо рдЗрдирдкреБрдЯ, useState рдЖрджрд┐), рддреЛ Client Component рдЬрд╝рд░реВрд░реА рд╣реИред

рдЗрдирдореЗрдВ React hooks рдЬреИрд╕реЗ useState, useEffect, useRef рдЖрджрд┐ рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред

рдЗрдиреНрд╣реЗрдВ explicitly рдмрддрд╛рдирд╛ рдкрдбрд╝рддрд╛ рд╣реИ рдХрд┐ рдпреЗ client рдкрд░ рд░рди рд╣реЛрдВрдЧреЗред

ЁЯФ╣ use client тАФ рдХреНрдпрд╛ рд╣реИ рдФрд░ рдХрдм рд▓рдЧрд╛рддреЗ рд╣реИрдВ?
тЬЕ Syntax:
'use client'

import { useState } from 'react';

export default function Counter() {
  const [count, setCount] = useState(0);

  return (
    <button onClick={() => setCount(count + 1)}>
      Count: {count}
    </button>
  );
}
ЁЯУМ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рд╕рдордЭреЗрдВ:
'use client' рдПрдХ directive рд╣реИ (string рд╣реИ, рдХреЛрдИ function рдирд╣реАрдВ)ред

рдЗрд╕реЗ component file рдХреЗ рд╕рдмрд╕реЗ рдКрдкрд░ рд▓рд┐рдЦрд╛ рдЬрд╛рддрд╛ рд╣реИред

рдЗрд╕рд╕реЗ Next.js рдХреЛ рдпрд╣ рдмрддрд╛рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рдХрд┐ рдпрд╣ component рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдкрд░ render рд╣реЛрдЧрд╛ред

рдпрд╣ рдЬрд╝рд░реВрд░реА рд╣реИ рдЕрдЧрд░ рдЖрдк:

Hooks (рдЬреИрд╕реЗ useState, useEffect) рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░ рд░рд╣реЗ рд╣реИрдВред

DOM manipulation рдХрд░ рд░рд╣реЗ рд╣реИрдВред

рдмреНрд░рд╛рдЙрдЬрд╝рд░ APIs (рдЬреИрд╕реЗ window, localStorage) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд░рд╣реЗ рд╣реИрдВред

рдХреЛрдИ client-side library (рдЬреИрд╕реЗ Chart.js рдпрд╛ animation libraries) рдпреВрдЬрд╝ рдХрд░ рд░рд╣реЗ рд╣реИрдВред

ЁЯФ╣ use server тАФ рдХреНрдпрд╛ рд╣реИ?
тЬЕ Syntax:
'use server'

export async function getData() {
  const res = await fetch('https://api.example.com/data');
  const data = await res.json();
  return data;
}
ЁЯУМ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рд╕рдордЭреЗрдВ:
'use server' directive рдпреЗ рдмрддрд╛рддрд╛ рд╣реИ рдХрд┐ рдпрд╣ function рд╕рд┐рд░реНрдл рд╕рд░реНрд╡рд░ рдкрд░ рд╣реА рд░рди рд╣реЛрдЧрд╛ред

рдпрд╣ рдореБрдЦреНрдпрддрдГ server actions (e.g. form handling, server-side database interaction) рдХреЗ рд▓рд┐рдП рдпреВрдЬрд╝ рд╣реЛрддрд╛ рд╣реИред

рдЖрдк рдЗрд╕реЗ React Component рдкрд░ рдирд╣реАрдВ рд▓рдЧрд╛рддреЗред рдпрд╣ рдХреЗрд╡рд▓ functions рдкрд░ use рд╣реЛрддрд╛ рд╣реИред

рдЗрд╕ function рдХреЛ client component рд╕реЗ call рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИ, рд▓реЗрдХрд┐рди actual execution server рдкрд░ рд╣реА рд╣реЛрддреА рд╣реИред

ЁЯФД рджреЛрдиреЛрдВ рдХреЗ рдмреАрдЪ рдЗрдВрдЯрд░реИрдХреНрд╢рди
рдЖрдк рдПрдХ Server Component рдХреЗ рдЕрдВрджрд░ Client Component рдХреЛ include рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:

// ServerComponent.jsx
import ClientButton from './ClientButton';

export default function ServerComponent() {
  return (
    <div>
      <h1>рдпрд╣ Server Component рд╣реИ</h1>
      <ClientButton />
    </div>
  );
}
// ClientButton.jsx
'use client'

export default function ClientButton() {
  return <button onClick={() => alert('Clicked!')}>Click Me</button>;
}
рд▓реЗрдХрд┐рди рдЗрд╕рдХрд╛ рдЙрд▓реНрдЯрд╛ рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ тАФ рдпрд╛рдирд┐ рдПрдХ Client Component рдХреЗ рдЕрдВрджрд░ рд╕реАрдзреЗ Server Component рдХреЛ рдЗрдореНрдкреЛрд░реНрдЯ рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗред

тЪая╕П рдХреНрдпреЛрдВ рдЬрд╝рд░реВрд░реА рд╣реИ рдпреЗ рд╕рдм?
Next.js рдХрд╛ рдордХрд╝рд╕рдж рд╣реИ рдмреЗрд╣рддрд░ performance рдФрд░ scalability:

Server Components рдХрдо JS рднреЗрдЬрддреЗ рд╣реИрдВ client рдХреЛ тЖТ рддреЗрдЬрд╝ рд▓реЛрдбрд┐рдВрдЧ

Client Components рд╡рд╣реА JS рднреЗрдЬрддреЗ рд╣реИрдВ рдЬреЛ interactive UI рдХреЗ рд▓рд┐рдП рдЬрд╝рд░реВрд░реА рд╣реИ

Code-splitting рдФрд░ caching рдмреЗрд╣рддрд░ рддрд░реАрдХреЗ рд╕реЗ рд╣реЛ рдкрд╛рддрд╛ рд╣реИ

ЁЯза Summary (рд╕рдВрдХреНрд╖реЗрдк рдореЗрдВ)
Directive	рдХрд╣рд╛рдБ рдпреВрдЬрд╝ рд╣реЛрддрд╛ рд╣реИ	рдХрд┐рд╕рд▓рд┐рдП рдЬрд╝рд░реВрд░реА рд╣реИ	Execution
'use client'	Component file рдХреЗ рдЯреЙрдк рдкрд░	React hooks, interactivity, browser APIs рдХреЗ рд▓рд┐рдП	Browser (Client-side)
'use server'	Server action functions рдкрд░	Server рдкрд░ data fetch, DB interaction, secure logic	Server-side only
рдЕрдЧрд░ рдЖрдк рдЪрд╛рд╣реЗрдВ рддреЛ рдореИрдВ рдПрдХ рдЫреЛрдЯрд╛ рд╕рд╛ рдбреЗрдореЛ рдкреНрд░реЛрдЬреЗрдХреНрдЯ structure рднреА рдмрдирд╛ рд╕рдХрддрд╛ рд╣реВрдБ рдЬрд┐рд╕рдореЗрдВ рджреЛрдиреЛрдВ рдХрд╛ рдкреНрд░рдпреЛрдЧ рджрд┐рдЦрд╛рдпрд╛ рдЧрдпрд╛ рд╣реЛред рдмрддрд╛рдЗрдП рдЕрдЧрд░ рдЪрд╛рд╣рд┐рдПред

By messaging ChatGPT, you agree to our Terms and have read our Privacy Policy. See Cookie Preferences.
Don't share sensitive info. Chats may be reviewed and used to train our models. Learn more



Attach

Search

Study

Voice
No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.


//fetching data in nextjs
  Skip to content
You said:
fetching data in nextjs explanation with full/all the details in hindi
ChatGPT said:
Next.js рдореЗрдВ рдбреЗрдЯрд╛ рдлреЗрдЪрд┐рдВрдЧ (Data Fetching) рдПрдХ рдмрд╣реБрдд рд╣реА рдорд╣рддреНрд╡рдкреВрд░реНрдг рдХреЙрдиреНрд╕реЗрдкреНрдЯ рд╣реИ, рдХреНрдпреЛрдВрдХрд┐ рдпрд╣ рддрдп рдХрд░рддрд╛ рд╣реИ рдХрд┐ рдЖрдкрдХрд╛ рдбреЗрдЯрд╛ рдХрдм, рдХреИрд╕реЗ рдФрд░ рдХрд╣рд╛рдБ рд╕реЗ рд▓рд╛рдпрд╛ рдЬрд╛рдПред Next.js рд╣рдореЗрдВ рдХрдИ рддрд░рд╣ рдХреЗ рдбреЗрдЯрд╛ рдлреЗрдЪрд┐рдВрдЧ рдореЗрдердбреНрд╕ рджреЗрддрд╛ рд╣реИ рддрд╛рдХрд┐ рд╣рдо SEO-friendly, рддреЗрдЬрд╝ рдФрд░ рд╕реНрдХреЗрд▓реЗрдмрд▓ рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдмрдирд╛ рд╕рдХреЗрдВред

рдпрд╣рд╛рдБ рд╣рдо Next.js рдореЗрдВ рдбреЗрдЯрд╛ рдлреЗрдЪрд┐рдВрдЧ рд╕реЗ рдЬреБрдбрд╝реА рд╣рд░ рдЪреАрдЬрд╝ рдХреЛ рдмрд╣реБрдд рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рд╣рд┐рдВрджреА рдореЗрдВ рд╕рдордЭреЗрдВрдЧреЗ:

ЁЯФ░ 1. рдбреЗрдЯрд╛ рдлреЗрдЪрд┐рдВрдЧ рдХреЗ рдкреНрд░рдХрд╛рд░ (Types of Data Fetching in Next.js)
Next.js рдореЗрдВ рдореБрдЦреНрдпрддрдГ рддреАрди рддрд░реАрдХреЗ рд╣реЛрддреЗ рд╣реИрдВ:

Static Generation (рдкреВрд░реНрд╡-рдЬрдирд┐рдд рдбреЗрдЯрд╛ - SSG)

Server-side Rendering (рд╕рд░реНрд╡рд░-рд╕рд╛рдЗрдб рдбреЗрдЯрд╛ - SSR)

Client-side Rendering (рдХреНрд▓рд╛рдЗрдВрдЯ рдкрд░ рдбреЗрдЯрд╛ - CSR)

ЁЯФ╡ 2. Static Generation (getStaticProps)
рдпрд╣ рдХреНрдпрд╛ рд╣реИ?
Static Generation рд╡рд╣ рддрд░реАрдХрд╛ рд╣реИ рдЬрд┐рд╕рдореЗрдВ рдкреЗрдЬ рдХреЛ рдмрд┐рд▓реНрдб рдЯрд╛рдЗрдо рдкрд░ HTML рдореЗрдВ рдмрджрд▓рдХрд░ рд╕рд░реНрд╡рд░ рдкрд░ рд╕реЗрд╡ рдХрд░ рджрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред рдЗрд╕рдХрд╛ рдлрд╛рдпрджрд╛ рдпреЗ рд╣реЛрддрд╛ рд╣реИ рдХрд┐ рд╡реЗрдмрд╕рд╛рдЗрдЯ рдмрд╣реБрдд рддреЗрдЬрд╝ рд▓реЛрдб рд╣реЛрддреА рд╣реИ рдХреНрдпреЛрдВрдХрд┐ рдкреЗрдЬ рдкрд╣рд▓реЗ рд╕реЗ рдмрдирд╛ рд╣реБрдЖ рд╣реЛрддрд╛ рд╣реИред

рдХрдм рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ?
рдЬрдм рдЖрдкрдХрд╛ рдбреЗрдЯрд╛ рдмрд╛рд░-рдмрд╛рд░ рдирд╣реАрдВ рдмрджрд▓рддрд╛ред

SEO рдЬрд╝рд░реВрд░реА рд╣реЛред

Syntax:
export async function getStaticProps() {
  const res = await fetch('https://api.example.com/data');
  const data = await res.json();

  return {
    props: {
      data,
    },
  };
}
Component рдореЗрдВ рдЙрдкрдпреЛрдЧ:
function Page({ data }) {
  return (
    <div>
      <h1>рдбреЗрдЯрд╛:</h1>
      <pre>{JSON.stringify(data, null, 2)}</pre>
    </div>
  );
}

export default Page;
ЁЯФ╡ 3. Static Generation with Dynamic Routes (getStaticPaths + getStaticProps)
рдпрд╣ рдХреНрдпрд╛ рд╣реИ?
рдЬрдм рдЖрдкрдХреЗ рдкрд╛рд╕ рдбрд╛рдпрдирд╛рдорд┐рдХ URL (рдЬреИрд╕реЗ /blog/[slug]) рд╣реЛрддреЗ рд╣реИрдВ рдФрд░ рдЖрдкрдХреЛ Static Generation рдХрд░рдирд╛ рд╣реИ, рддреЛ рдЖрдкрдХреЛ getStaticPaths() рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдирд╛ рд╣реЛрддрд╛ рд╣реИред

Syntax:
export async function getStaticPaths() {
  const res = await fetch('https://api.example.com/posts');
  const posts = await res.json();

  const paths = posts.map((post) => ({
    params: { slug: post.slug },
  }));

  return { paths, fallback: false };
}

export async function getStaticProps({ params }) {
  const res = await fetch(`https://api.example.com/posts/${params.slug}`);
  const post = await res.json();

  return {
    props: {
      post,
    },
  };
}
ЁЯФ┤ 4. Server-Side Rendering (getServerSideProps)
рдпрд╣ рдХреНрдпрд╛ рд╣реИ?
рдЬрдм рдЖрдкрдХреЛ рд╣рд░ рдмрд╛рд░ рдкреЗрдЬ рдХреЛ рд░рд┐рдпрд▓-рдЯрд╛рдЗрдо рдбреЗрдЯрд╛ рдХреЗ рд╕рд╛рде рд╕рд░реНрд╡рд░ рд╕реЗ рдЬрдирд░реЗрдЯ рдХрд░рдирд╛ рд╣реЛрддрд╛ рд╣реИ, рддрдм SSR рдХрд╛ рдЙрдкрдпреЛрдЧ рд╣реЛрддрд╛ рд╣реИред рдпрд╣ рд╣рд░ request рдкрд░ run рд╣реЛрддрд╛ рд╣реИред

Syntax:
export async function getServerSideProps(context) {
  const res = await fetch('https://api.example.com/data');
  const data = await res.json();

  return {
    props: {
      data,
    },
  };
}
рдХрдм рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ?
рдЬрдм рдбреЗрдЯрд╛ frequently рдмрджрд▓рддрд╛ рд╣реИред

рдпреВрдЬрд╝рд░-рд╕реНрдкреЗрд╕рд┐рдлрд┐рдХ рдбреЗрдЯрд╛ рдЪрд╛рд╣рд┐рдП (рдЬреИрд╕реЗ cookies, auth рдЖрджрд┐)ред

ЁЯЯв 5. Client-Side Rendering (CSR)
рдпрд╣ рдХреНрдпрд╛ рд╣реИ?
рдЗрд╕рдореЗрдВ рдбреЗрдЯрд╛ React рдХреЗ component рдореЗрдВ рдХреНрд▓рд╛рдЗрдВрдЯ рд╕рд╛рдЗрдб рдкрд░ fetch рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ, рдпрд╛рдиреА рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВред рдЗрд╕рдореЗрдВ useEffect рдФрд░ fetch рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рд╣реЛрддрд╛ рд╣реИред

Syntax:
import { useEffect, useState } from 'react';

function Page() {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetch('https://api.example.com/data')
      .then((res) => res.json())
      .then((data) => setData(data));
  }, []);

  if (!data) return <p>рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...</p>;

  return (
    <div>
      <h1>рдбреЗрдЯрд╛:</h1>
      <pre>{JSON.stringify(data, null, 2)}</pre>
    </div>
  );
}

export default Page;
рдХрдм рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ?
рдЬрдм SEO рдХреА рдЬрд╝рд░реВрд░рдд рдирд╣реАрдВ рд╣реЛред

рдпреВрдЬрд╝рд░ рдЗрдВрдЯрд░реИрдХреНрд╢рди рдкрд░ рдЖрдзрд╛рд░рд┐рдд рдбреЗрдЯрд╛ рдЪрд╛рд╣рд┐рдП рд╣реЛред

ЁЯУж 6. API Routes (Backend for frontend)
Next.js рдЖрдкрдХреЛ рдЕрдкрдиреЗ API endpoints рдмрдирд╛рдиреЗ рдХреА рднреА рд╕реБрд╡рд┐рдзрд╛ рджреЗрддрд╛ рд╣реИ тАФ рдпрд╛рдиреА рдЖрдк рдЕрдкрдирд╛ рдЦреБрдж рдХрд╛ backend рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВред

File: /pages/api/hello.js
export default function handler(req, res) {
  res.status(200).json({ message: 'рдирдорд╕реНрддреЗ рджреБрдирд┐рдпрд╛!' });
}
Client Side рдореЗрдВ рдЙрдкрдпреЛрдЧ:
useEffect(() => {
  fetch('/api/hello')
    .then((res) => res.json())
    .then((data) => console.log(data));
}, []);
тЪЦя╕П рдХреМрди-рд╕рд╛ рддрд░реАрдХрд╛ рдХрдм рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ?
рддрд░реАрдХрд╛	рдХрдм рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ
getStaticProps	рдЬрдм рдбреЗрдЯрд╛ rarely рдмрджрд▓рддрд╛ рд╣реЛ
getServerSideProps	рдЬрдм рд╣рд░ рдмрд╛рд░ рдирдпрд╛ рдбреЗрдЯрд╛ рдЪрд╛рд╣рд┐рдП
Client-side	рдЬрдм SEO рдЬрд╝рд░реВрд░реА рдирд╣реАрдВ рдФрд░ рдЗрдВрдЯрд░реИрдХреНрдЯрд┐рд╡ рдбреЗрдЯрд╛ рд╣реЛ
getStaticPaths	рдЬрдм dynamic route рдХреЛ static рдмрдирд╛рдирд╛ рд╣реЛ
API Routes	рдЬрдм рдЖрдкрдХреЛ рдЕрдкрдирд╛ backend рдмрдирд╛рдирд╛ рд╣реЛ
ЁЯза рдмреЛрдирд╕: ISR (Incremental Static Regeneration)
Next.js рдореЗрдВ рдПрдХ рдФрд░ рддрд░реАрдХрд╛ рд╣реИ - ISR, рдЬрд┐рд╕рдореЗрдВ рдЖрдк SSG + Real-time updates рджреЛрдиреЛрдВ рдХрд╛ рдлрд╛рдпрджрд╛ рдЙрдард╛ рд╕рдХрддреЗ рд╣реИрдВред

export async function getStaticProps() {
  const res = await fetch('https://api.example.com/data');
  const data = await res.json();

  return {
    props: { data },
    revalidate: 10, // рд╣рд░ 10 рд╕реЗрдХрдВрдб рдореЗрдВ рд░реА-рдЬреЗрдирд░реЗрдЯ рд╣реЛрдЧрд╛
  };
}
тЬНя╕П рдирд┐рд╖реНрдХрд░реНрд╖ (Conclusion)
Next.js рдЖрдкрдХреЛ рдбреЗрдЯрд╛ рдлреЗрдЪрд┐рдВрдЧ рдХреЗ рд▓рд┐рдП flexibility рджреЗрддрд╛ рд╣реИ:

рдЖрдк SEO-friendly рдкреЗрдЬ рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВ (getStaticProps, getServerSideProps)

рдЖрдк React-style client-side fetch рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ (useEffect)

рдЖрдк рдЕрдкрдирд╛ рдЦреБрдж рдХрд╛ API рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВ (API Routes)

рд╣рд░ рдореЗрдердб рдХреА рдЕрдкрдиреА рдЦрд╛рд╕рд┐рдпрдд рдФрд░ рдЙрдкрдпреЛрдЧ рдХрд╛ рд╕рдордп рд╣реИред

рдЕрдЧрд░ рдЖрдк рдЪрд╛рд╣реЗрдВ рддреЛ рдореИрдВ рд╣рд░ рдПрдХ рдореЗрдердб рдХрд╛ рдкреВрд░рд╛ live project structure рдФрд░ рдЙрджрд╛рд╣рд░рдг рдХреЛрдб рднреА рджреЗ рд╕рдХрддрд╛ рд╣реВрдБред рдмрддрд╛рдЗрдП, рдХрд┐рд╕ рдЯрд╛рдЗрдк рдХрд╛ рдЙрджрд╛рд╣рд░рдг рдЪрд╛рд╣рд┐рдП?

You said:
yes
ChatGPT said:
рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! рдЖрдкрдиреЗ "yes" рдХрд╣рд╛ тАФ рддреЛ рдореИрдВ рдЖрдкрдХреЛ Next.js рдХреЗ рдбреЗрдЯрд╛ рдлреЗрдЪрд┐рдВрдЧ рдХреЗ рд╣рд░ рддрд░реАрдХреЗ (SSG, SSR, CSR, API Routes, ISR) рдХреЗ рд▓рд┐рдП рдПрдХ live-style project structure рдФрд░ рдЙрджрд╛рд╣рд░рдг рдХреЛрдб рджреЗрдиреЗ рдЬрд╛ рд░рд╣рд╛ рд╣реВрдБред

тЬЕ рд╣рдо рдмрдирд╛рдПрдВрдЧреЗ рдПрдХ Blog-Type рдРрдк рдЬрд┐рд╕рдореЗрдВ:
/ (рд╣реЛрдо рдкреЗрдЬ) тАФ рд╕рднреА рдкреЛрд╕реНрдЯреНрд╕ рдХреЛ Static Generation (SSG) рд╕реЗ рд▓реЛрдб рдХрд░реЗрдЧрд╛

/posts/[slug] тАФ рдПрдХ рдкреЛрд╕реНрдЯ рдХреЛ Dynamic SSG + getStaticPaths рд╕реЗ рд▓реЛрдб рдХрд░реЗрдЧрд╛

/latest тАФ Server-Side Rendering (SSR) рд╕реЗ latest рдкреЛрд╕реНрдЯ рджрд┐рдЦрд╛рдПрдЧрд╛

/dashboard тАФ Client-side Rendering (CSR) рд╕реЗ рдпреВрдЬрд╝рд░ рдбреИрд╢рдмреЛрд░реНрдб рд▓реЛрдб рдХрд░реЗрдЧрд╛

/api/posts тАФ API Route рджреЗрдЧрд╛ рдЬреЛ рд╕рднреА рдкреЛрд╕реНрдЯреНрд╕ JSON рдореЗрдВ рджреЗрдЧрд╛

/revalidate тАФ ISR (Incremental Static Regeneration) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдЧрд╛

ЁЯУБ Project Structure (Next.js App)
my-next-app/
тФЬтФАтФА pages/
тФВ   тФЬтФАтФА index.js               тЖР SSG (getStaticProps)
тФВ   тФЬтФАтФА latest.js              тЖР SSR (getServerSideProps)
тФВ   тФЬтФАтФА dashboard.js           тЖР CSR
тФВ   тФЬтФАтФА posts/
тФВ   тФВ   тФФтФАтФА [slug].js          тЖР Dynamic SSG (getStaticPaths)
тФВ   тФЬтФАтФА revalidate.js          тЖР ISR Example
тФВ   тФФтФАтФА api/
тФВ       тФФтФАтФА posts.js           тЖР API Route
тФЬтФАтФА data/
тФВ   тФФтФАтФА posts.json             тЖР Sample local JSON data
тФЬтФАтФА package.json
тФФтФАтФА next.config.js
ЁЯЯб Sample JSON (ЁЯУД /data/posts.json)
[
  {
    "slug": "hello-world",
    "title": "Hello World",
    "content": "рдпреЗ рдореЗрд░реА рдкрд╣рд▓реА рдкреЛрд╕реНрдЯ рд╣реИред"
  },
  {
    "slug": "nextjs-guide",
    "title": "Next.js рдЧрд╛рдЗрдб",
    "content": "Next.js рд╕реАрдЦрдирд╛ рдордЬрд╝реЗрджрд╛рд░ рд╣реИред"
  }
]
1я╕ПтГг /pages/index.js тЖТ Static Generation (SSG)
import posts from '../data/posts.json';

export async function getStaticProps() {
  return {
    props: {
      posts,
    },
  };
}

export default function Home({ posts }) {
  return (
    <div>
      <h1>рд╣реЛрдо рдкреЗрдЬ</h1>
      <ul>
        {posts.map((post) => (
          <li key={post.slug}>
            <a href={`/posts/${post.slug}`}>{post.title}</a>
          </li>
        ))}
      </ul>
    </div>
  );
}
2я╕ПтГг /pages/posts/[slug].js тЖТ Dynamic Static Generation (getStaticPaths + getStaticProps)
import posts from '../../data/posts.json';

export async function getStaticPaths() {
  const paths = posts.map((post) => ({
    params: { slug: post.slug },
  }));

  return { paths, fallback: false };
}

export async function getStaticProps({ params }) {
  const post = posts.find((p) => p.slug === params.slug);

  return {
    props: {
      post,
    },
  };
}

export default function Post({ post }) {
  return (
    <div>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </div>
  );
}
3я╕ПтГг /pages/latest.js тЖТ Server-Side Rendering (SSR)
import posts from '../data/posts.json';

export async function getServerSideProps() {
  const latestPost = posts[posts.length - 1];

  return {
    props: {
      post: latestPost,
    },
  };
}

export default function Latest({ post }) {
  return (
    <div>
      <h1>рд▓реЗрдЯреЗрд╕реНрдЯ рдкреЛрд╕реНрдЯ</h1>
      <h2>{post.title}</h2>
      <p>{post.content}</p>
    </div>
  );
}
4я╕ПтГг /pages/dashboard.js тЖТ Client Side Rendering (CSR)
import { useEffect, useState } from 'react';

export default function Dashboard() {
  const [posts, setPosts] = useState([]);

  useEffect(() => {
    fetch('/api/posts')
      .then((res) => res.json())
      .then((data) => setPosts(data));
  }, []);

  return (
    <div>
      <h1>рдбреИрд╢рдмреЛрд░реНрдб</h1>
      <ul>
        {posts.map((post) => (
          <li key={post.slug}>{post.title}</li>
        ))}
      </ul>
    </div>
  );
}
5я╕ПтГг /pages/api/posts.js тЖТ API Route
import posts from '../../data/posts.json';

export default function handler(req, res) {
  res.status(200).json(posts);
}
6я╕ПтГг /pages/revalidate.js тЖТ ISR (Incremental Static Regeneration)
import posts from '../data/posts.json';

export async function getStaticProps() {
  return {
    props: {
      post: posts[0],
    },
    revalidate: 10, // рд╣рд░ 10 рд╕реЗрдХрдВрдб рдмрд╛рдж рдкреЗрдЬ рд░реАрдЬреЗрдирд░реЗрдЯ рд╣реЛ рд╕рдХрддрд╛ рд╣реИ
  };
}

export default function Revalidate({ post }) {
  return (
    <div>
      <h1>ISR Example</h1>
      <h2>{post.title}</h2>
      <p>{post.content}</p>
    </div>
  );
}
ЁЯУж Install Dependencies & Run
npm install
npm run dev
ЁЯЪА рдирддреАрдЬрд╛:
Route	рдбреЗрдЯрд╛ рдлреЗрдЪрд┐рдВрдЧ рдкреНрд░рдХрд╛рд░
/	SSG (Static Generation)
/posts/[slug]	Dynamic SSG + Paths
/latest	SSR (Real-Time)
/dashboard	CSR (Browser-side fetch)
/api/posts	API Route (Backend)
/revalidate	ISR (Auto Regenerating SSG)
ЁЯдЭ рдЖрдкрдХреЛ рдФрд░ рдХреНрдпрд╛ рдЪрд╛рд╣рд┐рдП?
рдЕрдЧрд░ рдЖрдк рдЪрд╛рд╣реЗрдВ рддреЛ:

рдЗрд╕ рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдХрд╛ ZIP рдлреЛрд▓реНрдбрд░

GitHub-ready version

Styling (Tailwind рдпрд╛ CSS modules)

Deployment guide (Vercel рдкрд░)

Auth рдпрд╛ DB рдЬреЛрдбрд╝рдирд╛

... рдпреЗ рд╕рдм рднреА рджреЗ рд╕рдХрддрд╛ рд╣реВрдБред рдмрддрд╛рдЗрдП рдЕрдЧрд▓рд╛ рд╕реНрдЯреЗрдк рдХреНрдпрд╛ рд╣реЛрдЧрд╛?



Attach

Search

Study

Voice
No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.

