Skip to content
You said:
give the example of server and client component in nextjs with its implementation and explanation full details in hindi
ChatGPT said:
Next.js рдореЗрдВ Server рдФрд░ Client Components рдХреЛ рдЕрд▓рдЧ-рдЕрд▓рдЧ рдкреНрд░рдХрд╛рд░ рдХреА rendering behavior рдХреЛ рд╕рдВрднрд╛рд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред рдпрд╣ Next.js 13 рдФрд░ рдЙрд╕рдХреЗ рдмрд╛рдж рдХреЗ рд╕рдВрд╕реНрдХрд░рдгреЛрдВ рдореЗрдВ App Router рдХреЗ рд╕рд╛рде introduce рдХрд┐рдпрд╛ рдЧрдпрд╛ рдерд╛ред рдЖрдЗрдП рд╣рдо рдЗрд╕реЗ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рд╣рд┐рдВрджреА рдореЗрдВ рд╕рдордЭрддреЗ рд╣реИрдВ, рдФрд░ рдПрдХ-рдПрдХ рдХрд░рдХреЗ Server Component рдФрд░ Client Component рдХреЗ рдЙрджрд╛рд╣рд░рдг рдФрд░ рдЙрдирдХрд╛ implementation рджреЗрдЦреЗрдВред

ЁЯза Server рдФрд░ Client Component рдХреНрдпрд╛ рд╣реЛрддреЗ рд╣реИрдВ?
ЁЯФ╣ рд╡рд┐рд╢реЗрд╖рддрд╛	ЁЯФ╣ Server Component	ЁЯФ╣ Client Component
рдХрд╣рд╛рдВ render рд╣реЛрддрд╛ рд╣реИ	Server рдкрд░	Client (Browser) рдкрд░
JavaScript рднреЗрдЬрддрд╛ рд╣реИ?	тЭМ рдирд╣реАрдВ	тЬЕ рд╣рд╛рдВ
рдЙрдкрдпреЛрдЧ	Data Fetching, SEO-friendly pages	Interactivity, Event handling
Hooks support	тЬЕ Server-only hooks (рдЬреИрд╕реЗ fetch)	тЬЕ Client-only hooks (рдЬреИрд╕реЗ useState, useEffect)
тЬЕ 1. Server Component рдХрд╛ рдЙрджрд╛рд╣рд░рдг
рд▓рдХреНрд╖рдг:

Default рд░реВрдк рд╕реЗ Next.js рдХреЗ рд╕рднреА components Server Components рд╣реЛрддреЗ рд╣реИрдВ рдЬрдм рддрдХ рдХрд┐ рд╣рдо рдЙрдиреНрд╣реЗрдВ explicitly "use client" рдирд╣реАрдВ рд▓рд┐рдЦрддреЗред

ЁЯУВ рдлрд╝реЛрд▓реНрдбрд░ рд╕рдВрд░рдЪрдирд╛:
app/
  тФФтФАтФА page.tsx
  тФФтФАтФА components/
         тФФтФАтФА ServerComponent.tsx
ЁЯУД components/ServerComponent.tsx
// ServerComponent.tsx (рдХреЛрдИ 'use client' рдирд╣реАрдВ рд╣реИ рдЗрд╕рд▓рд┐рдП рдпрд╣ Server Component рд╣реИ)
import React from 'react';

async function getData() {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts/1');
  const data = await res.json();
  return data;
}

const ServerComponent = async () => {
  const data = await getData();

  return (
    <div>
      <h2>рдпрд╣ рдПрдХ Server Component рд╣реИ</h2>
      <p>Title: {data.title}</p>
      <p>Body: {data.body}</p>
    </div>
  );
};

export default ServerComponent;
ЁЯУД app/page.tsx
import ServerComponent from './components/ServerComponent';

export default function HomePage() {
  return (
    <main>
      <h1>рдореБрдЦреНрдп рдкреГрд╖реНрда</h1>
      <ServerComponent />
    </main>
  );
}
ЁЯз╛ Explanation (рд╡реНрдпрд╛рдЦреНрдпрд╛):
ServerComponent.tsx рдореЗрдВ рдХреЛрдИ "use client" directive рдирд╣реАрдВ рд╣реИ, рдЗрд╕рд▓рд┐рдП рдпрд╣ server рдкрд░ рд╣реА render рд╣реЛрддрд╛ рд╣реИред

рдЗрд╕рдореЗрдВ рд╣рдордиреЗ async data fetching (fetch) рдХреА рдЬреЛ рдХреЗрд╡рд▓ server рдкрд░ рд╕рдВрднрд╡ рд╣реИред

рдпрд╣ SEO рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫрд╛ рд╣реИ рдХреНрдпреЛрдВрдХрд┐ HTML server рд╕реЗ pre-render рд╣реЛ рдХрд░ рдЖрддрд╛ рд╣реИред

тЬЕ 2. Client Component рдХрд╛ рдЙрджрд╛рд╣рд░рдг
рд▓рдХреНрд╖рдг:

"use client" directive рд╕рдмрд╕реЗ рдКрдкрд░ рдЬрд░реВрд░реА рд╣реИред

рдЗрд╕рдореЗрдВ browser-specific logic рдЬреИрд╕реЗ рдХрд┐ state management (useState) рдпрд╛ event handling рд╣реЛрддрд╛ рд╣реИред

ЁЯУД components/ClientComponent.tsx
'use client';

import React, { useState } from 'react';

const ClientComponent = () => {
  const [count, setCount] = useState(0);

  return (
    <div>
      <h2>рдпрд╣ рдПрдХ Client Component рд╣реИ</h2>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>рдмрдврд╝рд╛рдПрдВ</button>
    </div>
  );
};

export default ClientComponent;
ЁЯУД app/page.tsx (same file, both components use)
import ServerComponent from './components/ServerComponent';
import ClientComponent from './components/ClientComponent';

export default function HomePage() {
  return (
    <main>
      <h1>рдореБрдЦреНрдп рдкреГрд╖реНрда</h1>
      <ServerComponent />
      <ClientComponent />
    </main>
  );
}
ЁЯз╛ Explanation (рд╡реНрдпрд╛рдЦреНрдпрд╛):
"use client" рдХрд╛ рдорддрд▓рдм рд╣реИ рдХрд┐ рдпрд╣ component browser рдкрд░ render рд╣реЛрдЧрд╛ред

рдЗрд╕рдореЗрдВ рд╣рдо useState рдЬреИрд╕реЗ React Hooks рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

рдпрд╣ рдЗрдВрдЯрд░рдПрдХреНрдЯрд┐рд╡ рд╣реЛрддрд╛ рд╣реИ рдЬреИрд╕реЗ рдмрдЯрди рдХреНрд▓рд┐рдХ рдЗрддреНрдпрд╛рджрд┐ред

ЁЯФД Server рдФрд░ Client рдХреЛ рдорд┐рд▓рд╛рдХрд░ рдЙрдкрдпреЛрдЧ рдХрд░рдирд╛
Client Components рдХреЛ рдЖрдк Server Components рдХреЗ рдЕрдВрджрд░ рдЗрд╕реНрддреЗрдорд╛рд▓ рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ рд╕реАрдзреЗ, рд▓реЗрдХрд┐рди рдЖрдк рдЙрдиреНрд╣реЗрдВ props рджреЗрдХрд░ communication рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

тЭМ рдЧрд▓рдд рддрд░реАрдХрд╛:
// тЭМ ServerComponent.jsx рдореЗрдВ client component рдХреЛ import рдХрд░рдирд╛ (рдЧрд▓рдд рд╣реИ)
import ClientComponent from './ClientComponent'; // ERROR рджреЗрдЧрд╛
тЬЕ рд╕рд╣реА рддрд░реАрдХрд╛:
ServerComponent рдХреЛ рд╕рд┐рд░реНрдл data рджрд┐рдЦрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред

ClientComponent рдХреЛ event рдпрд╛ interaction рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред

ЁЯУМ рдирд┐рд╖реНрдХрд░реНрд╖ (Conclusion)
Point	Server Component	Client Component
рдЙрдкрдпреЛрдЧ	Static + dynamic data fetching, SEO	UI interaction, animations
рдкреНрд░рджрд░реНрд╢рди	рддреЗрдЬрд╝ (no JS in client)	рдереЛрдбрд╝рд╛ рднрд╛рд░реА (JS bundle рднреЗрдЬрддрд╛ рд╣реИ)
Hooks	fetch, server-side logic	useState, useEffect, etc
рдЕрдЧрд░ рдЖрдкрдХреЛ рдпрд╣ structure рддреИрдпрд╛рд░ рдХрд░рдирд╛ рд╣реИ:
npx create-next-app@latest my-app --experimental-app
cd my-app
npm run dev
рдлрд┐рд░ app/ directory рдореЗрдВ рдКрдкрд░ рдХреЗ components рдмрдирд╛рдПрдВред

рдЕрдЧрд░ рдЖрдк рдЪрд╛рд╣реЗрдВ рддреЛ рдореИрдВ рдПрдХ рдкреВрд░рд╛ GitHub-ready рдЙрджрд╛рд╣рд░рдг рдпрд╛ CodeSandbox рд▓рд┐рдВрдХ рднреА рдмрдирд╛ рд╕рдХрддрд╛ рд╣реВрдБред рдмрддрд╛рдПрдВ ЁЯШК



Attach

Search

Study

Voice
No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.

