Skip to content
You said:
give the example of server and client component in nextjs with its implementation and explanation full details in hindi
ChatGPT said:
Next.js рдореЗрдВ Server рдФрд░ Client Components рдХреЛ рдЕрд▓рдЧ-рдЕрд▓рдЧ рдкреНрд░рдХрд╛рд░ рдХреА rendering behavior рдХреЛ рд╕рдВрднрд╛рд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред рдпрд╣ Next.js 13 рдФрд░ рдЙрд╕рдХреЗ рдмрд╛рдж рдХреЗ рд╕рдВрд╕реНрдХрд░рдгреЛрдВ рдореЗрдВ App Router рдХреЗ рд╕рд╛рде introduce рдХрд┐рдпрд╛ рдЧрдпрд╛ рдерд╛ред рдЖрдЗрдП рд╣рдо рдЗрд╕реЗ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рд╣рд┐рдВрджреА рдореЗрдВ рд╕рдордЭрддреЗ рд╣реИрдВ, рдФрд░ рдПрдХ-рдПрдХ рдХрд░рдХреЗ Server Component рдФрд░ Client Component рдХреЗ рдЙрджрд╛рд╣рд░рдг рдФрд░ рдЙрдирдХрд╛ implementation рджреЗрдЦреЗрдВред

ЁЯза Server рдФрд░ Client Component рдХреНрдпрд╛ рд╣реЛрддреЗ рд╣реИрдВ?
ЁЯФ╣ рд╡рд┐рд╢реЗрд╖рддрд╛	ЁЯФ╣ Server Component	ЁЯФ╣ Client Component
рдХрд╣рд╛рдВ render рд╣реЛрддрд╛ рд╣реИ	Server рдкрд░	Client (Browser) рдкрд░
JavaScript рднреЗрдЬрддрд╛ рд╣реИ?	тЭМ рдирд╣реАрдВ	тЬЕ рд╣рд╛рдВ
рдЙрдкрдпреЛрдЧ	Data Fetching, SEO-friendly pages	Interactivity, Event handling
Hooks support	тЬЕ Server-only hooks (рдЬреИрд╕реЗ fetch)	тЬЕ Client-only hooks (рдЬреИрд╕реЗ useState, useEffect)
тЬЕ 1. Server Component рдХрд╛ рдЙрджрд╛рд╣рд░рдг
рд▓рдХреНрд╖рдг:

Default рд░реВрдк рд╕реЗ Next.js рдХреЗ рд╕рднреА components Server Components рд╣реЛрддреЗ рд╣реИрдВ рдЬрдм рддрдХ рдХрд┐ рд╣рдо рдЙрдиреНрд╣реЗрдВ explicitly "use client" рдирд╣реАрдВ рд▓рд┐рдЦрддреЗред

ЁЯУВ рдлрд╝реЛрд▓реНрдбрд░ рд╕рдВрд░рдЪрдирд╛:
app/
  тФФтФАтФА page.tsx
  тФФтФАтФА components/
         тФФтФАтФА ServerComponent.tsx
ЁЯУД components/ServerComponent.tsx
// ServerComponent.tsx (рдХреЛрдИ 'use client' рдирд╣реАрдВ рд╣реИ рдЗрд╕рд▓рд┐рдП рдпрд╣ Server Component рд╣реИ)
import React from 'react';

async function getData() {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts/1');
  const data = await res.json();
  return data;
}

const ServerComponent = async () => {
  const data = await getData();

  return (
    <div>
      <h2>рдпрд╣ рдПрдХ Server Component рд╣реИ</h2>
      <p>Title: {data.title}</p>
      <p>Body: {data.body}</p>
    </div>
  );
};

export default ServerComponent;
ЁЯУД app/page.tsx
import ServerComponent from './components/ServerComponent';

export default function HomePage() {
  return (
    <main>
      <h1>рдореБрдЦреНрдп рдкреГрд╖реНрда</h1>
      <ServerComponent />
    </main>
  );
}
ЁЯз╛ Explanation (рд╡реНрдпрд╛рдЦреНрдпрд╛):
ServerComponent.tsx рдореЗрдВ рдХреЛрдИ "use client" directive рдирд╣реАрдВ рд╣реИ, рдЗрд╕рд▓рд┐рдП рдпрд╣ server рдкрд░ рд╣реА render рд╣реЛрддрд╛ рд╣реИред

рдЗрд╕рдореЗрдВ рд╣рдордиреЗ async data fetching (fetch) рдХреА рдЬреЛ рдХреЗрд╡рд▓ server рдкрд░ рд╕рдВрднрд╡ рд╣реИред

рдпрд╣ SEO рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫрд╛ рд╣реИ рдХреНрдпреЛрдВрдХрд┐ HTML server рд╕реЗ pre-render рд╣реЛ рдХрд░ рдЖрддрд╛ рд╣реИред

тЬЕ 2. Client Component рдХрд╛ рдЙрджрд╛рд╣рд░рдг
рд▓рдХреНрд╖рдг:

"use client" directive рд╕рдмрд╕реЗ рдКрдкрд░ рдЬрд░реВрд░реА рд╣реИред

рдЗрд╕рдореЗрдВ browser-specific logic рдЬреИрд╕реЗ рдХрд┐ state management (useState) рдпрд╛ event handling рд╣реЛрддрд╛ рд╣реИред

ЁЯУД components/ClientComponent.tsx
'use client';

import React, { useState } from 'react';

const ClientComponent = () => {
  const [count, setCount] = useState(0);

  return (
    <div>
      <h2>рдпрд╣ рдПрдХ Client Component рд╣реИ</h2>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>рдмрдврд╝рд╛рдПрдВ</button>
    </div>
  );
};

export default ClientComponent;
ЁЯУД app/page.tsx (same file, both components use)
import ServerComponent from './components/ServerComponent';
import ClientComponent from './components/ClientComponent';

export default function HomePage() {
  return (
    <main>
      <h1>рдореБрдЦреНрдп рдкреГрд╖реНрда</h1>
      <ServerComponent />
      <ClientComponent />
    </main>
  );
}
ЁЯз╛ Explanation (рд╡реНрдпрд╛рдЦреНрдпрд╛):
"use client" рдХрд╛ рдорддрд▓рдм рд╣реИ рдХрд┐ рдпрд╣ component browser рдкрд░ render рд╣реЛрдЧрд╛ред

рдЗрд╕рдореЗрдВ рд╣рдо useState рдЬреИрд╕реЗ React Hooks рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

рдпрд╣ рдЗрдВрдЯрд░рдПрдХреНрдЯрд┐рд╡ рд╣реЛрддрд╛ рд╣реИ рдЬреИрд╕реЗ рдмрдЯрди рдХреНрд▓рд┐рдХ рдЗрддреНрдпрд╛рджрд┐ред

ЁЯФД Server рдФрд░ Client рдХреЛ рдорд┐рд▓рд╛рдХрд░ рдЙрдкрдпреЛрдЧ рдХрд░рдирд╛
Client Components рдХреЛ рдЖрдк Server Components рдХреЗ рдЕрдВрджрд░ рдЗрд╕реНрддреЗрдорд╛рд▓ рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ рд╕реАрдзреЗ, рд▓реЗрдХрд┐рди рдЖрдк рдЙрдиреНрд╣реЗрдВ props рджреЗрдХрд░ communication рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

тЭМ рдЧрд▓рдд рддрд░реАрдХрд╛:
// тЭМ ServerComponent.jsx рдореЗрдВ client component рдХреЛ import рдХрд░рдирд╛ (рдЧрд▓рдд рд╣реИ)
import ClientComponent from './ClientComponent'; // ERROR рджреЗрдЧрд╛
тЬЕ рд╕рд╣реА рддрд░реАрдХрд╛:
ServerComponent рдХреЛ рд╕рд┐рд░реНрдл data рджрд┐рдЦрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред

ClientComponent рдХреЛ event рдпрд╛ interaction рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред

ЁЯУМ рдирд┐рд╖реНрдХрд░реНрд╖ (Conclusion)
Point	Server Component	Client Component
рдЙрдкрдпреЛрдЧ	Static + dynamic data fetching, SEO	UI interaction, animations
рдкреНрд░рджрд░реНрд╢рди	рддреЗрдЬрд╝ (no JS in client)	рдереЛрдбрд╝рд╛ рднрд╛рд░реА (JS bundle рднреЗрдЬрддрд╛ рд╣реИ)
Hooks	fetch, server-side logic	useState, useEffect, etc
рдЕрдЧрд░ рдЖрдкрдХреЛ рдпрд╣ structure рддреИрдпрд╛рд░ рдХрд░рдирд╛ рд╣реИ:
npx create-next-app@latest my-app --experimental-app
cd my-app
npm run dev
рдлрд┐рд░ app/ directory рдореЗрдВ рдКрдкрд░ рдХреЗ components рдмрдирд╛рдПрдВред

рдЕрдЧрд░ рдЖрдк рдЪрд╛рд╣реЗрдВ рддреЛ рдореИрдВ рдПрдХ рдкреВрд░рд╛ GitHub-ready рдЙрджрд╛рд╣рд░рдг рдпрд╛ CodeSandbox рд▓рд┐рдВрдХ рднреА рдмрдирд╛ рд╕рдХрддрд╛ рд╣реВрдБред рдмрддрд╛рдПрдВ ЁЯШК



Attach

Search

Study

Voice
No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.
Skip to content
You said:
server component and client component explain it with api fetching example in nextjs along with the explanation and full details in hindi
ChatGPT said:
Next.js рдореЗрдВ Server Components рдФрд░ Client Components рдХрд╛ рдХреЙрдиреНрд╕реЗрдкреНрдЯ React 18 рдХреЗ рд╕рд╛рде introduce рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред рдЗрд╕рд╕реЗ рд╣рдо рдмреЗрд╣рддрд░ рддрд░реАрдХреЗ рд╕реЗ performance optimize рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рдФрд░ user experience рдХреЛ smooth рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВред

ЁЯФ╣ Server Components рдФрд░ Client Components рдХреНрдпрд╛ рд╣реЛрддреЗ рд╣реИрдВ?
тЬЕ Server Component:
рдпреЗ components server рдкрд░ render рд╣реЛрддреЗ рд╣реИрдВред

рдЗрдиреНрд╣реЗрдВ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдкрд░ рдирд╣реАрдВ рднреЗрдЬрд╛ рдЬрд╛рддрд╛ред

рдпреЗ directly database рдпрд╛ backend APIs рд╕реЗ data fetch рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

рдЗрдирдХрд╛ JavaScript client рддрдХ рдирд╣реАрдВ рднреЗрдЬрд╛ рдЬрд╛рддрд╛, рдЬрд┐рд╕рд╕реЗ performance рдмреЗрд╣рддрд░ рд╣реЛрддреА рд╣реИред

тЬЕ Client Component:
рдпреЗ components рдмреНрд░рд╛рдЙрдЬрд╝рд░ (client-side) рдкрд░ render рд╣реЛрддреЗ рд╣реИрдВред

Interactivity (рдЬреИрд╕реЗ button clicks, form input, etc.) рдХреЗ рд▓рд┐рдП client components рдХреА рдЬрд╝рд░реВрд░рдд рд╣реЛрддреА рд╣реИред

рдЗрдиреНрд╣реЗрдВ "use client" directive рдХреЗ рд╕рд╛рде define рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред

ЁЯУж Example: API Fetching рдХреЗ рд╕рд╛рде Server рдФрд░ Client Component (Hindi рдореЗрдВ рдкреВрд░рд╛ рд╕рдордЭрд╛рдпрд╛ рдЧрдпрд╛)
ЁЯз▒ Project Structure:
app/
 тФг page.tsx              <-- Home Page
 тФг components/
    тФг ServerData.tsx     <-- Server Component
    тФг ClientData.tsx     <-- Client Component
ЁЯЯй Step 1: рдПрдХ Fake API рдмрдирд╛рдПрдБ рдпрд╛ JSONPlaceholder рдпреВрдЬрд╝ рдХрд░реЗрдВ
API: https://jsonplaceholder.typicode.com/posts/1

ЁЯЯж Server Component: ServerData.tsx
// app/components/ServerData.tsx
import React from 'react';

async function fetchPost() {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts/1');
  const data = await res.json();
  return data;
}

export default async function ServerData() {
  const post = await fetchPost();

  return (
    <div style={{ border: '1px solid green', padding: '10px' }}>
      <h2>ЁЯУб Server Component Data</h2>
      <p><strong>Title:</strong> {post.title}</p>
      <p><strong>Body:</strong> {post.body}</p>
    </div>
  );
}
ЁЯФ╣ Explanation in Hindi:

рдпреЗ component server рдкрд░ run рд╣реЛрддрд╛ рд╣реИред

fetch() server-side рд╣реЛрддрд╛ рд╣реИ, рдпрд╛рдиреА рдпрд╣ client рддрдХ рдирд╣реАрдВ рдЬрд╛рддрд╛ред

API call backend рдкрд░ рд╣реЛрддреА рд╣реИ, рдЬрд┐рд╕рд╕реЗ security рдФрд░ speed рджреЛрдиреЛрдВ рдорд┐рд▓рддреА рд╣реИрдВред

ЁЯЯи Client Component: ClientData.tsx
// app/components/ClientData.tsx
'use client';

import React, { useEffect, useState } from 'react';

export default function ClientData() {
  const [post, setPost] = useState<any>(null);

  useEffect(() => {
    fetch('https://jsonplaceholder.typicode.com/posts/1')
      .then(res => res.json())
      .then(data => setPost(data));
  }, []);

  return (
    <div style={{ border: '1px solid blue', padding: '10px' }}>
      <h2>ЁЯТ╗ Client Component Data</h2>
      {post ? (
        <>
          <p><strong>Title:</strong> {post.title}</p>
          <p><strong>Body:</strong> {post.body}</p>
        </>
      ) : (
        <p>Loading...</p>
      )}
    </div>
  );
}
ЁЯФ╣ Explanation in Hindi:

рдпреЗ component client/browser рдореЗрдВ run рд╣реЛрддрд╛ рд╣реИред

useEffect() рдХреЗ рдЕрдВрджрд░ API call рд╣реЛрддреА рд╣реИ рдпрд╛рдиреА рдпрд╣ page load рдХреЗ рдмрд╛рдж call рд╣реЛрддреА рд╣реИред

Interactivity (рдЬреИрд╕реЗ рдХрд┐рд╕реА event рдкрд░ fetch рдХрд░рдирд╛) client component рд╕реЗ manage рд╣реЛрддрд╛ рд╣реИред

ЁЯФ╢ Main Page (app/page.tsx)
// app/page.tsx
import ServerData from './components/ServerData';
import ClientData from './components/ClientData';

export default function HomePage() {
  return (
    <div style={{ padding: '20px' }}>
      <h1>Next.js 13 - Server vs Client Components</h1>
      <ServerData />
      <br />
      <ClientData />
    </div>
  );
}
ЁЯФН Summary (рд╕рд╛рд░рд╛рдВрд╢):
Feature	Server Component	Client Component
Render Location	Server	Browser (Client)
Data Fetching	Server-side (directly with fetch)	useEffect рдХреЗ рдЕрдВрджрд░ client-side
Performance	Fast (no JS sent to client)	Slower (JS sent to client)
Interactivity	тЭМ No	тЬЕ Yes
Use Case	Static data, SEO friendly content	User input, dynamic interactivity
Directive Required?	тЭМ No	тЬЕ "use client"
тЬЕ рдХрдм рдХреНрдпрд╛ рдпреВрдЬрд╝ рдХрд░реЗрдВ?
рдЬрд░реВрд░рдд	Component
SEO, Fast load, Static data	Server Component
User interaction, Events	Client Component
рдЕрдЧрд░ рдЖрдк рдЪрд╛рд╣реЗрдВ рддреЛ рдореИрдВ рдЗрд╕ рдкреВрд░реЗ code рдХрд╛ GitHub рдпрд╛ zip structure рднреА рдмрдирд╛ рд╕рдХрддрд╛ рд╣реВрдБред рдмрддрд╛рдПрдВ рдЕрдЧрд░ рдЪрд╛рд╣рд┐рдПред

Also, рдЕрдЧрд░ рдЖрдк рдЪрд╛рд╣реЗрдВ рддреЛ рдЗрд╕реА example рдХреЛ Next.js 14 рдпрд╛ App Router, SSR, ISR рдХреЗ рд╕рд╛рде рднреА рджрд┐рдЦрд╛ рд╕рдХрддрд╛ рд╣реВрдБред



Attach

Search

Study

Voice
No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.


