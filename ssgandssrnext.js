Skip to content
You said:
ssg vs ssr in nextjs with explanation along with the full details in detail
ChatGPT said:
In Next.js, one of the major strengths is its support for different rendering strategies, mainly SSG (Static Site Generation) and SSR (Server-Side Rendering).

HereтАЩs a comprehensive and detailed comparison between SSG and SSR in Next.js, including how they work, when to use them, performance considerations, pros/cons, and example code.

ЁЯФБ Overview: SSG vs SSR
Feature	SSG (Static Site Generation)	SSR (Server-Side Rendering)
Generation time	At build time	At request time
Performance	тЪб Fastest (pre-rendered HTML)	ЁЯРв Slower (HTML generated per request)
Data freshness	тЭМ Can be stale	тЬЕ Always fresh
Use case	Blogs, landing pages, docs, marketing	Dashboards, user-specific pages
Hosting cost	Low (CDN-based static hosting)	Higher (needs server or SSR support)
ЁЯФз Definitions
1. SSG (Static Site Generation)
How it works: Pages are generated at build time and served as static HTML files.

The HTML files are stored in the CDN and served instantly when a user requests them.

Ideal for content that doesnтАЩt change often.

тЮХ Pros:
Blazing fast since itтАЩs static content.

SEO-friendly as HTML is ready.

Cheap to host on CDN (e.g., Vercel, Netlify).

тЮЦ Cons:
Outdated data unless rebuilt.

No personalization (unless combined with client-side rendering).

2. SSR (Server-Side Rendering)
How it works: HTML is generated on the server for every request, based on fresh data.

Good for dynamic content or user-specific data.

тЮХ Pros:
Always fresh data.

Supports dynamic content and personalization.

тЮЦ Cons:
Slower than SSG (server round-trip on each request).

Higher server cost (compute required per request).

Less cacheable.

ЁЯзСтАНЁЯТ╗ Code Examples
ЁЯФ╣ SSG Example (getStaticProps)
// pages/blog/[slug].js

export async function getStaticPaths() {
  const res = await fetch('https://api.example.com/posts');
  const posts = await res.json();

  const paths = posts.map(post => ({
    params: { slug: post.slug },
  }));

  return { paths, fallback: false };
}

export async function getStaticProps({ params }) {
  const res = await fetch(`https://api.example.com/posts/${params.slug}`);
  const post = await res.json();

  return {
    props: { post }, // passed to the page component as props
  };
}

export default function BlogPost({ post }) {
  return (
    <article>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </article>
  );
}
ЁЯУМ Explanation:

getStaticPaths: Pre-generates all blog post paths.

getStaticProps: Fetches post data at build time.

Result: All blog pages are statically generated and hosted.

ЁЯФ╣ SSR Example (getServerSideProps)
// pages/profile.js

export async function getServerSideProps(context) {
  const res = await fetch(`https://api.example.com/user/${context.query.id}`);
  const user = await res.json();

  return {
    props: { user }, // passed to the page component
  };
}

export default function ProfilePage({ user }) {
  return (
    <div>
      <h1>Welcome, {user.name}</h1>
      <p>Email: {user.email}</p>
    </div>
  );
}
ЁЯУМ Explanation:

getServerSideProps: Runs on every request.

Fetches the latest user data from API each time.

Best for authenticated pages or personal dashboards.

ЁЯза When to Use What?
Scenario	Use SSG	Use SSR
Static marketing pages	тЬЕ Yes	тЭМ No
Blog or documentation	тЬЕ Yes	тЭМ No
Frequently updated data (e.g., news)	тЪая╕П Maybe (with ISR)	тЬЕ Yes
User dashboards / Auth pages	тЭМ No	тЬЕ Yes
Product pages with real-time stock	тЪая╕П Maybe (ISR)	тЬЕ Yes
тЪб ISR: Incremental Static Regeneration (Bonus)
Next.js also supports ISR, a hybrid between SSG and SSR.

export async function getStaticProps() {
  const data = await fetchData();
  return {
    props: { data },
    revalidate: 60, // Re-generate the page every 60 seconds
  };
}
Regenerates static page in the background every n seconds.

Improves freshness without losing SSG performance.

ЁЯЪА Summary
Aspect	SSG	SSR
Render Time	Build Time	Request Time
Performance	тЬЕ Fastest	тЪая╕П Slower
Fresh Data	тЭМ No (unless ISR)	тЬЕ Yes
SEO Support	тЬЕ Yes	тЬЕ Yes
Use with Auth	тЭМ No (client-side only)	тЬЕ Yes
Hosting Type	CDN/static	Server/Node runtime
Example Functions	getStaticProps, getStaticPaths	getServerSideProps
ЁЯзй Final Thoughts
Use SSG for speed and scale, especially for content that doesn't change per user.

Use SSR when you need real-time data or user-specific rendering.

Consider ISR as a flexible solution when you want the best of both worlds.

Let me know if you want a live project example using both or a diagram to visualize the workflow.



Attach

Search

Study

Voice
No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.

//more explanation
  Skip to content
You said:
explain the ssg and ssr along with the full/details explanation in hindi
ChatGPT said:
SSG (Static Site Generation) рдФрд░ SSR (Server Side Rendering) рджреЛрдиреЛрдВ рд╡реЗрдмрд╕рд╛рдЗрдЯ рдпрд╛ рд╡реЗрдм рдРрдк рдХреЛ рд░реЗрдВрдбрд░ рдХрд░рдиреЗ (рджрд┐рдЦрд╛рдиреЗ) рдХреА рддрдХрдиреАрдХреЗрдВ рд╣реИрдВ, рдЦрд╛рд╕рдХрд░ React.js рдпрд╛ Next.js рдЬреИрд╕реЗ рдлреНрд░реЗрдорд╡рд░реНрдХ рдореЗрдВред рдпреЗ рджреЛрдиреЛрдВ рддрд░реАрдХрд╛ рд╡реЗрдмрд╕рд╛рдЗрдЯ рдХреЗ рдкрд░рдлреЙрд░реНрдореЗрдВрд╕, SEO, рдпреВрдЬрд╝рд░ рдПрдХреНрд╕рдкреАрд░рд┐рдпрдВрд╕, рдФрд░ рдбреЗрд╡рд▓рдкрдореЗрдВрдЯ рд╕реНрдЯрд╛рдЗрд▓ рдХреЛ рдкреНрд░рднрд╛рд╡рд┐рдд рдХрд░рддреЗ рд╣реИрдВред

ЁЯФ╡ SSG (Static Site Generation) тАУ рд╕реНрдЯреИрдЯрд┐рдХ рд╕рд╛рдЗрдЯ рдЬреЗрдирд░реЗрд╢рди рдХреНрдпрд╛ рд╣реИ?
ЁЯУМ рдкрд░рд┐рднрд╛рд╖рд╛:
SSG рдореЗрдВ рд╡реЗрдм рдкреЗрдЬ рдХреЛ рдмрд┐рд▓реНрдб рдЯрд╛рдЗрдо (build time) рдкрд░ рд╣реА HTML рдореЗрдВ рдХрдиреНрд╡рд░реНрдЯ рдХрд░ рджрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред рдЬрдм рдЖрдк рд╡реЗрдмрд╕рд╛рдЗрдЯ рдХреЛ рдбрд┐рдкреНрд▓реЙрдп рдХрд░рддреЗ рд╣реИрдВ, рддреЛ рд╡рд╣ рд╕рд╛рд░реЗ рдкреЗрдЬ рдкрд╣рд▓реЗ рд╕реЗ рд╣реА HTML рдлреЙрд░реНрдо рдореЗрдВ рдЬрдирд░реЗрдЯ рд╣реЛ рдЪреБрдХреЗ рд╣реЛрддреЗ рд╣реИрдВред

ЁЯУЛ рдЙрджрд╛рд╣рд░рдг:
Next.js рдореЗрдВ getStaticProps() рдФрд░ getStaticPaths() рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ SSG рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред

тЬЕ SSG рдХреЗ рдлрд╛рдпрджреЗ:
рдмрд╣реБрдд рддреЗрдЬрд╝ рдкрд░рдлреЙрд░реНрдореЗрдВрд╕: рдХреНрдпреЛрдВрдХрд┐ HTML рдкрд╣рд▓реЗ рд╕реЗ рдмрдирд╛ рд╣реБрдЖ рд╣реЛрддрд╛ рд╣реИ, рдпреВрдЬрд╝рд░ рдХреЛ рддреБрд░рдВрдд рдкреЗрдЬ рджрд┐рдЦрддрд╛ рд╣реИред

рдмреЗрд╣рддрд░ SEO: рд╕рд░реНрдЪ рдЗрдВрдЬрди рдХреЗ рд▓рд┐рдП рдЖрд╕рд╛рди рд╣реЛрддрд╛ рд╣реИ HTML рдХреЛ рдкрдврд╝рдирд╛ред

рдХрдо рд╕рд░реНрд╡рд░ рд▓реЛрдб: рд╕рд░реНрд╡рд░ рдкрд░ рдХреЛрдИ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рдирд╣реАрдВ рд╣реЛрддреА рдЬрдм рдпреВрдЬрд╝рд░ рдкреЗрдЬ рдЦреЛрд▓рддрд╛ рд╣реИред

CDN Friendly: рд╕реНрдЯреИрдЯрд┐рдХ рдлрд╛рдЗрд▓реНрд╕ рдХреЛ CDN рдкрд░ рд╣реЛрд╕реНрдЯ рдХрд░рдирд╛ рдЖрд╕рд╛рди рд╣реЛрддрд╛ рд╣реИред

тЭМ SSG рдХреА рд╕реАрдорд╛рдПрдВ:
рдбрд╛рдпрдирд╛рдорд┐рдХ рдбреЗрдЯрд╛ рдХреЗ рд▓рд┐рдП рд╕рд╣реА рдирд╣реАрдВ: рдпрджрд┐ рдбреЗрдЯрд╛ рдмрд╛рд░-рдмрд╛рд░ рдмрджрд▓рддрд╛ рд╣реИ (рдЬреИрд╕реЗ рдпреВрдЬрд╝рд░ рдбреИрд╢рдмреЛрд░реНрдб рдпрд╛ рд▓рд╛рдЗрд╡ рд╕реНрдХреЛрд░), рддреЛ SSG рдЕрдЪреНрдЫрд╛ рд╡рд┐рдХрд▓реНрдк рдирд╣реАрдВ рд╣реИред

рд░рд┐рдЬреЗрдиреЗрд░реЗрд╢рди рдЬрд░реВрд░реА рд╣реЛрддрд╛ рд╣реИ: рдбреЗрдЯрд╛ рдЕрдкрдбреЗрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдкреЗрдЬ рдХреЛ рдлрд┐рд░ рд╕реЗ рдмрд┐рд▓реНрдб рдХрд░рдирд╛ рд╣реЛрддрд╛ рд╣реИред

ЁЯЯв SSR (Server Side Rendering) тАУ рд╕рд░реНрд╡рд░ рд╕рд╛рдЗрдб рд░реЗрдВрдбрд░рд┐рдВрдЧ рдХреНрдпрд╛ рд╣реИ?
ЁЯУМ рдкрд░рд┐рднрд╛рд╖рд╛:
SSR рдореЗрдВ рд╣рд░ рдмрд╛рд░ рдЬрдм рдпреВрдЬрд╝рд░ рд╡реЗрдмрд╕рд╛рдЗрдЯ рдУрдкрди рдХрд░рддрд╛ рд╣реИ, рддрдм рд╕рд░реНрд╡рд░ HTML рдкреЗрдЬ рдХреЛ рд░рд┐рдпрд▓ рдЯрд╛рдЗрдо рдореЗрдВ рдЬрдирд░реЗрдЯ рдХрд░рддрд╛ рд╣реИред рдпрд╛рдиреА рдмреНрд░рд╛рдЙрдЬрд╝рд░ рд╕реЗ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдЖрдиреЗ рдкрд░ рд╕рд░реНрд╡рд░ рдкрд░ React рдХрдВрдкреЛрдиреЗрдВрдЯ рд░рди рд╣реЛрддрд╛ рд╣реИ рдФрд░ HTML рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рднреЗрдЬрд╛ рдЬрд╛рддрд╛ рд╣реИред

ЁЯУЛ рдЙрджрд╛рд╣рд░рдг:
Next.js рдореЗрдВ getServerSideProps() рдХрд╛ рдЙрдкрдпреЛрдЧ SSR рдХреЗ рд▓рд┐рдП рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред

тЬЕ SSR рдХреЗ рдлрд╛рдпрджреЗ:
рдбрд╛рдпрдирд╛рдорд┐рдХ рдХрдВрдЯреЗрдВрдЯ рдХреЗ рд▓рд┐рдП рдмреЗрд╣рддрд░: рдЬреИрд╕реЗ рдиреНрдпреВрдЬрд╝, рд▓реЙрдЧрд┐рди рдпреВрдЬрд╝рд░ рдбреИрд╢рдмреЛрд░реНрдб, рдпрд╛ рдИ-рдХреЙрдорд░реНрд╕ рд╡реЗрдмрд╕рд╛рдЗрдЯред

SEO рдлреНрд░реЗрдВрдбрд▓реА: рд╕рд░реНрдЪ рдЗрдВрдЬрди рдХреЛ HTML рдорд┐рд▓рддрд╛ рд╣реИ, рдЬреЛ рдЙрд╕реЗ рдЖрд╕рд╛рдиреА рд╕реЗ рдкрдврд╝ рд╕рдХрддрд╛ рд╣реИред

рд╣рд░ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдкрд░ рд▓реЗрдЯреЗрд╕реНрдЯ рдбреЗрдЯрд╛: рдпреВрдЬрд╝рд░ рдХреЛ рд╣рдореЗрд╢рд╛ рдЕрдкрдбреЗрдЯреЗрдб рдбреЗрдЯрд╛ рдорд┐рд▓рддрд╛ рд╣реИред

тЭМ SSR рдХреА рд╕реАрдорд╛рдПрдВ:
рдзреАрдореА рд╕реНрдкреАрдб: рд╣рд░ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдкрд░ HTML рдмрдирд╛рдирд╛ рдкрдбрд╝рддрд╛ рд╣реИ, рдЬрд┐рд╕рд╕реЗ рд▓реЛрдб рдЯрд╛рдЗрдо рдмрдврд╝ рд╕рдХрддрд╛ рд╣реИред

рд╕рд░реНрд╡рд░ рдкрд░ рд▓реЛрдб: рд╣рд░ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдкрд░ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рд╣реЛрддреА рд╣реИ, рдЬрд┐рд╕рд╕реЗ рд╕рд░реНрд╡рд░ рдкрд░ рдЬреНрдпрд╛рджрд╛ рджрдмрд╛рд╡ рд╣реЛрддрд╛ рд╣реИред

рдХреЙрдореНрдкреНрд▓реЗрдХреНрд╕ рдЗрдВрдлреНрд░рд╛рд╕реНрдЯреНрд░рдХреНрдЪрд░: SSR рдХреЛ рд╕реНрдХреЗрд▓реЗрдмрд▓ рдмрдирд╛рдирд╛ рдереЛрдбрд╝рд╛ рдЪреБрдиреМрддреАрдкреВрд░реНрдг рд╣реЛрддрд╛ рд╣реИред

ЁЯФБ рддреБрд▓рдирд╛ тАУ SSG vs SSR
рдлреАрдЪрд░	SSG	SSR
HTML рдЬрдирд░реЗрд╢рди	рдмрд┐рд▓реНрдб рдЯрд╛рдЗрдо рдкрд░	рд╣рд░ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдкрд░
рдкрд░рдлреЙрд░реНрдореЗрдВрд╕	рддреЗрдЬрд╝ (Static рдлрд╛рдЗрд▓реНрд╕)	рдереЛрдбрд╝рд╛ рдзреАрдорд╛ (рд░рдирдЯрд╛рдЗрдо рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ)
SEO рдлреНрд░реЗрдВрдбрд▓реА	рд╣рд╛рдБ	рд╣рд╛рдБ
рдбрд╛рдпрдирд╛рдорд┐рдХ рдбреЗрдЯрд╛ рд╕рдкреЛрд░реНрдЯ	рд╕реАрдорд┐рдд	рдЕрдЪреНрдЫрд╛
рд╕реНрдХреЗрд▓реЗрдмрд┐рд▓рд┐рдЯреА	рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛	рд╕реАрдорд┐рдд
рд╕рд░реНрд╡рд░ рд▓реЛрдб	рдмрд╣реБрдд рдХрдо	рдЬреНрдпрд╛рджрд╛
ЁЯза рдХрд┐рд╕реЗ рдЪреБрдиреЗрдВ?
SSG рддрдм рдЪреБрдиреЗрдВ рдЬрдм:

рдЖрдкрдХреА рд╡реЗрдмрд╕рд╛рдЗрдЯ рдореЗрдВ рдмрд╛рд░-рдмрд╛рд░ рдмрджрд▓рд╛рд╡ рдирд╣реАрдВ рд╣реЛрддрд╛ (рдЬреИрд╕реЗ рдмреНрд▓реЙрдЧ, рдбреЙрдХреНрдпреВрдореЗрдВрдЯреЗрд╢рди)ред

рдЖрдкрдХреЛ рддреЗрдЬрд╝ рд╕реНрдкреАрдб рдЪрд╛рд╣рд┐рдПред

SSR рддрдм рдЪреБрдиреЗрдВ рдЬрдм:

рдЖрдкрдХрд╛ рдХрдВрдЯреЗрдВрдЯ рдбрд╛рдпрдирд╛рдорд┐рдХ рд╣реИ (рдЬреИрд╕реЗ рд▓реЙрдЧрд┐рди рдпреВрдЬрд╝рд░ рдбреЗрдЯрд╛, рдпрд╛ рдкреНрд░реЛрдбрдХреНрдЯ рд╕рд░реНрдЪ)ред

рдЖрдкрдХреЛ рд╣рд░ рдмрд╛рд░ рдирдпрд╛ рдбреЗрдЯрд╛ рджрд┐рдЦрд╛рдирд╛ рд╣реИред

рдЕрдЧрд░ рдЪрд╛рд╣реЛ рддреЛ рдореИрдВ рдЗрди рджреЛрдиреЛрдВ рдХреЗ рд▓рд┐рдП Next.js рдореЗрдВ рдХреЛрдб рдЙрджрд╛рд╣рд░рдг рднреА рджреЗ рд╕рдХрддрд╛ рд╣реВрдБред рдмрддрд╛рдУ, рдЪрд╛рд╣рд┐рдП?

You said:
yes
ChatGPT said:
рдмрд┐рд▓рдХреБрд▓! рдиреАрдЪреЗ рдореИрдВ Next.js рдореЗрдВ SSG (Static Site Generation) рдФрд░ SSR (Server Side Rendering) рджреЛрдиреЛрдВ рдХреЗ рд▓рд┐рдП рдмреЗрд╕рд┐рдХ рдХреЛрдб рдЙрджрд╛рд╣рд░рдг рджреЗ рд░рд╣рд╛ рд╣реВрдБ, рдЬрд┐рд╕рд╕реЗ рдЖрдк рдЖрд╕рд╛рдиреА рд╕реЗ рд╕рдордЭ рд╕рдХреЛ рдХрд┐ рджреЛрдиреЛрдВ рдореЗрдВ рдХреНрдпрд╛ рдЕрдВрддрд░ рд╣реИ рдФрд░ рдЙрдиреНрд╣реЗрдВ рдХреИрд╕реЗ implement рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред

ЁЯФ╡ Static Site Generation (SSG) тАУ Next.js Example
тЬЕ Example: рдПрдХ рдмреНрд▓реЙрдЧ рдкреЛрд╕реНрдЯ рдХреЛ SSG рдХреЗ рдЬрд╝рд░рд┐рдП рджрд┐рдЦрд╛рдирд╛
// pages/blog/[id].js

import React from 'react';

export async function getStaticPaths() {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts');
  const posts = await res.json();

  // рд╣рд░ рдмреНрд▓реЙрдЧ рдкреЛрд╕реНрдЯ рдХреЗ рд▓рд┐рдП рдПрдХ path рдмрдирд╛рдПрдВ
  const paths = posts.map(post => ({
    params: { id: post.id.toString() },
  }));

  return { paths, fallback: false };
}

export async function getStaticProps({ params }) {
  const res = await fetch(`https://jsonplaceholder.typicode.com/posts/${params.id}`);
  const post = await res.json();

  return {
    props: {
      post,
    },
  };
}

export default function BlogPost({ post }) {
  return (
    <div>
      <h1>{post.title}</h1>
      <p>{post.body}</p>
    </div>
  );
}
ЁЯУМ рд╕рдордЭрд╛рдЗрдП:
getStaticPaths() тАФ рдпрд╣ рд╕рднреА paths рдХреЛ generate рдХрд░рддрд╛ рд╣реИ рдЬреЛ SSG рдореЗрдВ рдкреНрд░реА-рдмрд┐рд▓реНрдЯ рд╣реЛрдВрдЧреЗред

getStaticProps() тАФ рд╣рд░ path рдХреЗ рд▓рд┐рдП рдбреЗрдЯрд╛ рдлреЗрдЪ рдХрд░рддрд╛ рд╣реИ рдФрд░ рдкреЗрдЬ HTML рдмрдирд╛ рджреЗрддрд╛ рд╣реИред

рдЬрдм рдЖрдк next build рдХрд░рддреЗ рд╣реИрдВ, рдпреЗ рдкреЗрдЬ рдкрд╣рд▓реЗ рд╕реЗ HTML рдореЗрдВ рдЬрдирд░реЗрдЯ рд╣реЛ рдЬрд╛рддреЗ рд╣реИрдВред

ЁЯЯв Server Side Rendering (SSR) тАУ Next.js Example
тЬЕ Example: рд╣рд░ рдмрд╛рд░ рдЬрдм рдпреВрдЬрд╝рд░ рдкреЗрдЬ рдУрдкрди рдХрд░реЗ, рддрдм API рд╕реЗ рдбреЗрдЯрд╛ рд▓рд╛рдирд╛
// pages/news.js

import React from 'react';

export async function getServerSideProps() {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5');
  const posts = await res.json();

  return {
    props: {
      posts,
    },
  };
}

export default function News({ posts }) {
  return (
    <div>
      <h1>Latest News</h1>
      <ul>
        {posts.map(post => (
          <li key={post.id}>
            <strong>{post.title}</strong>
            <p>{post.body}</p>
          </li>
        ))}
      </ul>
    </div>
  );
}
ЁЯУМ рд╕рдордЭрд╛рдЗрдП:
getServerSideProps() рд╣рд░ рдмрд╛рд░ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдкрд░ рдЪрд▓рддрд╛ рд╣реИред

рдпреВрдЬрд╝рд░ рдХреЛ рд╣рдореЗрд╢рд╛ рд╕рдмрд╕реЗ рддрд╛рдЬрд╝рд╛ (latest) рдбреЗрдЯрд╛ рджрд┐рдЦрддрд╛ рд╣реИред

SEO рдлреНрд░реЗрдВрдбрд▓реА рднреА рд╣реИ рдХреНрдпреЛрдВрдХрд┐ HTML рд╕рд░реНрд╡рд░ рд╕реЗ рд╣реА рдмрдирдХрд░ рдЖрддрд╛ рд╣реИред

ЁЯФБ рд╕рдВрдХреНрд╖реЗрдк рдореЗрдВ рдЕрдВрддрд░ (Code Level):
рдлреАрдЪрд░	SSG	SSR
рдбреЗрдЯрд╛ рдлреЗрдЪрд┐рдВрдЧ	getStaticProps, getStaticPaths	getServerSideProps
HTML рдмрдирддрд╛ рд╣реИ	Build time	Request time
рдкрд░рдлреЙрд░реНрдореЗрдВрд╕	рдмрд╣реБрдд рддреЗрдЬрд╝	рдереЛрдбрд╝рд╛ рдзреАрдорд╛
рдХрдВрдЯреЗрдВрдЯ рдЕрдкрдбреЗрдЯ	рд░реА-рдмрд┐рд▓реНрдб рдХрд░рдирд╛ рдкрдбрд╝рддрд╛ рд╣реИ	рддреБрд░рдВрдд рдЕрдкрдбреЗрдЯ
рдЕрдЧрд░ рддреБрдо рдЪрд╛рд╣реЛ рддреЛ рдореИрдВ рдЗрди рджреЛрдиреЛрдВ рдХреЗ рд▓рд┐рдП API mocking, fallback settings, рдпрд╛ ISR (Incremental Static Regeneration) рдХрд╛ рднреА рдЙрджрд╛рд╣рд░рдг рджреЗ рд╕рдХрддрд╛ рд╣реВрдБред

рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣реЗрдВрдЧреЗ рдХрд┐ рд╣рдо рдЙрд╕рдореЗрдВ рднреА рдЬрд╛рдПрдВ?



Attach

Search

Study

Voice
No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.

ChatGPT says: рдмрд┐рд▓рдХреБрд▓! рдиреАрдЪреЗ рдореИрдВ **Next.js** рдореЗрдВ **SSG (Static Site Generation)** рдФрд░ **SSR (Server Side Rendering)** рджреЛрдиреЛрдВ рдХреЗ рд▓рд┐рдП рдмреЗрд╕рд┐рдХ рдХреЛрдб рдЙрджрд╛рд╣рд░рдг рджреЗ рд░рд╣рд╛ рд╣реВрдБ, рдЬрд┐рд╕рд╕реЗ рдЖрдк рдЖрд╕рд╛рдиреА рд╕реЗ рд╕рдордЭ рд╕рдХреЛ рдХрд┐ рджреЛрдиреЛрдВ рдореЗрдВ рдХреНрдпрд╛ рдЕрдВрддрд░ рд╣реИ рдФрд░ рдЙрдиреНрд╣реЗрдВ рдХреИрд╕реЗ implement рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред --- ## ЁЯФ╡ Static Site Generation (SSG) тАУ Next.js Example ### тЬЕ Example: рдПрдХ рдмреНрд▓реЙрдЧ рдкреЛрд╕реНрдЯ рдХреЛ SSG рдХреЗ рдЬрд╝рд░рд┐рдП рджрд┐рдЦрд╛рдирд╛ ```jsx // pages/blog/[id].js import React from 'react'; export async function getStaticPaths() { const res = await fetch('https://jsonplaceholder.typicode.com/posts'); const posts = await res.json(); // рд╣рд░ рдмреНрд▓реЙрдЧ рдкреЛрд╕реНрдЯ рдХреЗ рд▓рд┐рдП рдПрдХ path рдмрдирд╛рдПрдВ const paths = posts.map(post => ({ params: { id: post.id.toString() }, })); return { paths, fallback: false }; } export async function getStaticProps({ params }) { const res = await fetch(`https://jsonplaceholder.typicode.com/posts/${params.id}`); const post = await res.json(); return { props: { post, }, }; } export default function BlogPost({ post }) { return ( <div> <h1>{post.title}</h1> <p>{post.body}</p> </div> ); } ``` ### ЁЯУМ рд╕рдордЭрд╛рдЗрдП: - `getStaticPaths()` тАФ рдпрд╣ рд╕рднреА paths рдХреЛ generate рдХрд░рддрд╛ рд╣реИ рдЬреЛ SSG рдореЗрдВ рдкреНрд░реА-рдмрд┐рд▓реНрдЯ рд╣реЛрдВрдЧреЗред - `getStaticProps()` тАФ рд╣рд░ path рдХреЗ рд▓рд┐рдП рдбреЗрдЯрд╛ рдлреЗрдЪ рдХрд░рддрд╛ рд╣реИ рдФрд░ рдкреЗрдЬ HTML рдмрдирд╛ рджреЗрддрд╛ рд╣реИред - рдЬрдм рдЖрдк `next build` рдХрд░рддреЗ рд╣реИрдВ, рдпреЗ рдкреЗрдЬ рдкрд╣рд▓реЗ рд╕реЗ HTML рдореЗрдВ рдЬрдирд░реЗрдЯ рд╣реЛ рдЬрд╛рддреЗ рд╣реИрдВред --- ## ЁЯЯв Server Side Rendering (SSR) тАУ Next.js Example ### тЬЕ Example: рд╣рд░ рдмрд╛рд░ рдЬрдм рдпреВрдЬрд╝рд░ рдкреЗрдЬ рдУрдкрди рдХрд░реЗ, рддрдм API рд╕реЗ рдбреЗрдЯрд╛ рд▓рд╛рдирд╛ ```jsx // pages/news.js import React from 'react'; export async function getServerSideProps() { const res = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5'); const posts = await res.json(); return { props: { posts, }, }; } export default function News({ posts }) { return ( <div> <h1>Latest News</h1> <ul> {posts.map(post => ( <li key={post.id}> <strong>{post.title}</strong> <p>{post.body}</p> </li> ))} </ul> </div> ); } ``` ### ЁЯУМ рд╕рдордЭрд╛рдЗрдП: - `getServerSideProps()` рд╣рд░ рдмрд╛рд░ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдкрд░ рдЪрд▓рддрд╛ рд╣реИред - рдпреВрдЬрд╝рд░ рдХреЛ рд╣рдореЗрд╢рд╛ рд╕рдмрд╕реЗ рддрд╛рдЬрд╝рд╛ (latest) рдбреЗрдЯрд╛ рджрд┐рдЦрддрд╛ рд╣реИред - SEO рдлреНрд░реЗрдВрдбрд▓реА рднреА рд╣реИ рдХреНрдпреЛрдВрдХрд┐ HTML рд╕рд░реНрд╡рд░ рд╕реЗ рд╣реА рдмрдирдХрд░ рдЖрддрд╛ рд╣реИред --- ## ЁЯФБ рд╕рдВрдХреНрд╖реЗрдк рдореЗрдВ рдЕрдВрддрд░ (Code Level): | рдлреАрдЪрд░ | SSG | SSR | |--------------------|-------------------------------------|--------------------------------------| | рдбреЗрдЯрд╛ рдлреЗрдЪрд┐рдВрдЧ | `getStaticProps`, `getStaticPaths` | `getServerSideProps` | | HTML рдмрдирддрд╛ рд╣реИ | Build time | Request time | | рдкрд░рдлреЙрд░реНрдореЗрдВрд╕ | рдмрд╣реБрдд рддреЗрдЬрд╝ | рдереЛрдбрд╝рд╛ рдзреАрдорд╛ | | рдХрдВрдЯреЗрдВрдЯ рдЕрдкрдбреЗрдЯ | рд░реА-рдмрд┐рд▓реНрдб рдХрд░рдирд╛ рдкрдбрд╝рддрд╛ рд╣реИ | рддреБрд░рдВрдд рдЕрдкрдбреЗрдЯ | --- рдЕрдЧрд░ рддреБрдо рдЪрд╛рд╣реЛ рддреЛ рдореИрдВ рдЗрди рджреЛрдиреЛрдВ рдХреЗ рд▓рд┐рдП **API mocking, fallback settings**, рдпрд╛ **ISR (Incremental Static Regeneration)** рдХрд╛ рднреА рдЙрджрд╛рд╣рд░рдг рджреЗ рд╕рдХрддрд╛ рд╣реВрдБред рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣реЗрдВрдЧреЗ рдХрд┐ рд╣рдо рдЙрд╕рдореЗрдВ рднреА рдЬрд╛рдПрдВ?
